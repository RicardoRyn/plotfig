{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7b80\u4ecb","text":"<p><code>plotfig</code> \u662f\u4e00\u4e2a\u4e13\u4e3a\u79d1\u5b66\u6570\u636e\u53ef\u89c6\u5316\u8bbe\u8ba1\u7684 Python \u5e93\uff0c\u81f4\u529b\u4e8e\u4e3a\u8ba4\u77e5\u795e\u7ecf\u79d1\u7814\u5de5\u4f5c\u4eba\u5458\u63d0\u4f9b\u9ad8\u6548\u3001\u6613\u7528\u4e14\u7f8e\u89c2\u7684\u56fe\u5f62\u7ed8\u5236\u5de5\u5177\u3002 \u8be5\u9879\u76ee\u57fa\u4e8e\u4e1a\u754c\u4e3b\u6d41\u7684\u53ef\u89c6\u5316\u5e93\u2014\u2014 <code>matplotlib</code>\u3001<code>surfplot</code> \u548c <code>plotly</code>\u7b49\u5e93\u5f00\u53d1\uff0c\u878d\u5408\u4e86\u4e09\u8005\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u80fd\u591f\u6ee1\u8db3\u795e\u7ecf\u79d1\u5b66\u3001\u8111\u8fde\u63a5\u7ec4\u5b66\u3001\u76f8\u5173\u6027\u5206\u6790\u3001\u77e9\u9635\u53ef\u89c6\u5316\u7b49\u591a\u79cd\u79d1\u7814\u573a\u666f\u4e0b\u7684\u590d\u6742\u7ed8\u56fe\u9700\u6c42\u3002</p> <p></p>"},{"location":"#_2","title":"\u9879\u76ee\u7ed3\u6784","text":"<p>\u9879\u76ee\u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u6838\u5fc3\u4ee3\u7801\u4f4d\u4e8e <code>src/plotfig/</code> \u76ee\u5f55\u4e0b\uff0c\u5305\u542b\u5982\u4e0b\u4e3b\u8981\u529f\u80fd\u6a21\u5757\uff1a</p> <ul> <li><code>bar.py</code>\uff1a\u6761\u5f62\u56fe\u7ed8\u5236\uff0c\u9002\u7528\u4e8e\u5206\u7ec4\u6570\u636e\u7684\u5bf9\u6bd4\u5c55\u793a\u3002</li> <li><code>correlation.py</code>\uff1a\u76f8\u5173\u6027\u77e9\u9635\u53ef\u89c6\u5316\uff0c\u4fbf\u4e8e\u5206\u6790\u53d8\u91cf\u95f4\u7684\u76f8\u5173\u6027\u5206\u5e03\u3002</li> <li><code>matrix.py</code>\uff1a\u901a\u7528\u77e9\u9635\u53ef\u89c6\u5316\uff0c\u652f\u6301\u591a\u79cd\u914d\u8272\u548c\u6ce8\u91ca\u65b9\u5f0f\u3002</li> <li><code>brain_surface.py</code>\uff1a\u8111\u8868\u9762\u53ef\u89c6\u5316\uff0c\u5b9e\u73b0\u4e09\u7ef4\u8111\u8868\u9762\u56fe\u96c6\u7ed3\u6784\u7684\u7ed8\u5236\u3002</li> <li><code>circos.py</code>\uff1a\u5f26\u56fe\u53ef\u89c6\u5316\uff0c\u9002\u5408\u5e73\u9762\u5c55\u793a\u8111\u533a\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u3002</li> <li><code>brain_connection.py</code>\uff1a\u73bb\u7483\u8111\u8fde\u63a5\u53ef\u89c6\u5316\uff0c\u652f\u6301\u590d\u6742\u7684\u8111\u7f51\u7edc\u7ed3\u6784\u5c55\u793a\u3002</li> </ul>"},{"location":"#_3","title":"\u7279\u6027","text":"<p><code>plotfig</code> API \u8bbe\u8ba1\u7b80\u6d01\uff0c\u53c2\u6570\u7075\u6d3b\uff0c\u9002\u5408\u79d1\u7814\u4eba\u5458\u548c\u6570\u636e\u5206\u6790\u5e08\u5feb\u901f\u96c6\u6210\u5230\u81ea\u5df1\u7684\u6570\u636e\u5206\u6790\u6d41\u7a0b\u4e2d\u3002 \u5176\u6a21\u5757\u5316\u67b6\u6784\u4fbf\u4e8e\u540e\u7eed\u529f\u80fd\u6269\u5c55\u548c\u81ea\u5b9a\u4e49\u5f00\u53d1\u3002 \u7ed3\u5408 <code>matplotlib</code> \u652f\u6301\u77e2\u91cf\u56fe\u6216\u9ad8\u5206\u8fa8\u7387\u4f4d\u56fe\u548c\u4ea4\u4e92\u5f0f HTML \u8f93\u51fa\uff0c\u9002\u5408\u8bba\u6587\u53d1\u8868\u548c\u5b66\u672f\u5c55\u793a\u3002</p> <p>\u70eb\u77e5\u8bc6\uff1a\u4e00\u5f20\u56fe\u4e0a\u7684\u6240\u6709\u5143\u7d20<sup>1</sup>\u3002 </p> <ol> <li> <p>Quick start guide of matplotlib. \u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#170-2025-09-09","title":"1.7.0 (2025-09-09)","text":""},{"location":"changelog/#features","title":"Features \u2728","text":"<ul> <li>bar: allow single-group bar plots to optionally show dots (de2a2bb)</li> </ul>"},{"location":"changelog/#161-2025-09-07","title":"1.6.1 (2025-09-07)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes \ud83d\udd27","text":"<ul> <li>circos: prevent type warning from type annotations (b3552da)</li> </ul>"},{"location":"changelog/#160-2025-09-06","title":"1.6.0 (2025-09-06)","text":""},{"location":"changelog/#features_1","title":"Features \u2728","text":"<ul> <li>circos: Implement a new method for drawing circos plots (ebf3352)</li> <li>utils: Add several utility functions (b59f2a4)</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes \ud83d\udd27","text":"<ul> <li>bar: fix bug causing multi_bar plot failure (a797006)</li> <li>connec: Fix color bug caused by integer values (b104c1f)</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring \u267b\ufe0f","text":"<ul> <li>circos: Temporarily disable circos plot (a96bb09)</li> <li>corr/matrix: function now returns Axes object (e47cada)</li> <li>corr: change default ax title font size in correlation plots to 12 (5aab9fe)</li> <li>surface: Deprecate old functions (d90dc92)</li> </ul>"},{"location":"changelog/#151-2025-08-11","title":"1.5.1 (2025-08-11)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>connec: fix issue with line_color display under color scale (83d46d7)</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>bar: Remove the legacy <code>plot_one_group_violin_figure_old</code> function (6d1316d)</li> </ul>"},{"location":"changelog/#150-2025-08-07","title":"1.5.0 (2025-08-07)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>bar: support combining multiple statistical test methods (34b6960)</li> <li>connec: Add <code>line_color</code> parameter to customize connection line colors (e4de41e)</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>bar: mark string input for <code>test_method</code> as planned for deprecation (e56d6d7)</li> </ul>"},{"location":"changelog/#140-2025-07-30","title":"1.4.0 (2025-07-30)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>bar: support color transparency adjustment via <code>color_alpha</code> argument (530980d)</li> </ul>"},{"location":"changelog/#133-2025-07-29","title":"1.3.3 (2025-07-29)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>bar: handle empty significance plot without error</li> </ul>"},{"location":"changelog/#132-2025-07-29","title":"1.3.2 (2025-07-29)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>deps: use the correct version of surfplot</li> </ul>"},{"location":"changelog/#131-2025-07-28","title":"1.3.1 (2025-07-28)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>deps: update surfplot dependency info to use GitHub version</li> </ul>"},{"location":"changelog/#130-2025-07-28","title":"1.3.0 (2025-07-28)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>bar: add one-sample t-test functionality</li> </ul>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>bar: isolate random number generator inside function</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>surface: unify brain surface plotting with new plot_brain_surface_figure</li> <li>bar: replace print with warnings.warn</li> <li>bar: rename arguments in plot_one_group_bar_figure</li> <li>tests: remove unused tests folder</li> </ul>"},{"location":"changelog/#121-2025-07-24","title":"1.2.1 (2025-07-24)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>bar: rename <code>y_lim_range</code> to <code>y_lim</code> in <code>plot_one_group_bar_figure</code></li> </ul>"},{"location":"changelog/#120-2025-07-24","title":"1.2.0 (2025-07-24)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>violin: add function to plot single-group violin fig</li> </ul>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>matrix: changed return value to None</li> </ul>"},{"location":"changelog/#110-2025-07-21","title":"1.1.0 (2025-07-21)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>corr: allow hexbin to show dense scatter points in correlation plot</li> <li>bar: support gradient color bars and now can change border color</li> </ul>"},{"location":"changelog/#100-2025-07-03","title":"1.0.0 (2025-07-03)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>bar: support plotting single-group bar charts with statistical tests</li> <li>bar: support plotting multi-group bars charts</li> <li>corr: support combined sactter and line correlation plots</li> <li>matrix: support plotting matrix plots (i.e. heatmaps)</li> <li>surface: support brain region plots for human, chimpanzee and macaque</li> <li>circos: support brain connectivity circos plots</li> <li>connection: support glass brain connectivity plots</li> </ul>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>surface: fix bug where function did not retrun fig only</li> <li>surface: fix bug where brain region with zero values were not displayed</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>src: refactor code for more readability and maintainability</li> </ul>"},{"location":"installation/","title":"\u5b89\u88c5","text":""},{"location":"installation/#_2","title":"\u666e\u901a\u5b89\u88c5","text":"<p><code>plotfig</code> \u652f\u6301\u901a\u8fc7 <code>pip</code> \u6216\u6e90\u7801\u5b89\u88c5\uff0c\u8981\u6c42 Python 3.11 \u53ca\u4ee5\u4e0a\u7248\u672c\u3002</p>"},{"location":"installation/#pip","title":"\u4f7f\u7528 pip \u5b89\u88c5 (\u63a8\u8350)","text":"<pre><code>pip install plotfig\n</code></pre>"},{"location":"installation/#github","title":"\u4f7f\u7528 GitHub \u6e90\u7801\u5b89\u88c5","text":"<pre><code>git clone --depth 1 https://github.com/RicardoRyn/plotfig.git\ncd plotfig\npip install .\n</code></pre>"},{"location":"installation/#_3","title":"\u4f9d\u8d56\u8981\u6c42","text":"<p><code>plotfig</code> \u4f9d\u8d56\u82e5\u5e72\u6838\u5fc3\u5e93\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u5c06\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u81ea\u52a8\u5904\u7406\uff0c\u4f46\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>surfplot \u9700\u4f7f\u7528\u5176 GitHub \u4ed3\u5e93\u4e2d\u7684\u6700\u65b0\u7248\uff0c\u800c\u975e PyPI \u4e0a\u7684\u7248\u672c\uff0c\u56e0\u540e\u8005\u5c1a\u672a\u5305\u542b\u6240\u9700\u529f\u80fd\u3002</li> </ul> <p>\u6307\u5b9a <code>surfplot</code> \u7248\u672c</p> <p>\u7531\u4e8e PyPI \u4e0a\u7684 <code>surfplot</code> \u7248\u672c\u8f83\u65e7\uff0c\u7f3a\u5c11 <code>plotfig</code> \u6240\u9700\u529f\u80fd\uff0c\u5efa\u8bae\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b89\u88c5\u5176 GitHub \u4ed3\u5e93\u7684\u6700\u65b0\u7248\u3002</p> <p>\u5982\u679c\u60a8\u65e0\u987b\u7ed8\u5236 brain_surface \u56fe\uff0c\u53ef\u4ee5\u5ffd\u7565\u6b64\u6b65\u9aa4\u3002</p> <pre><code># \u5378\u8f7d\u65e7\u7248\u672c\npip uninstall surfplot\n\n# \u514b\u9686\u6e90\u7801\u5e76\u5b89\u88c5\ngit clone --depth 1 https://github.com/danjgale/surfplot.git\ncd surfplot\npip install .\n\n# \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u8fd4\u56de\u4e0a\u7ea7\u76ee\u5f55\u5e76\u5220\u9664\u6e90\u7801\u6587\u4ef6\u5939\ncd ..\nrm -rf surfplot\n</code></pre>"},{"location":"installation/#_4","title":"\u8d21\u732e\u6307\u5357","text":"<p>\u5982\u679c\u60a8\u5e0c\u671b\u53c2\u4e0e <code>plotfig</code> \u7684\u5f00\u53d1\uff0c\u6216\u8005\u60f3\u4f53\u9a8c\u5c1a\u672a\u6b63\u5f0f\u53d1\u5e03\u7684\u65b0\u529f\u80fd\uff0c\u53ef\u4ee5\u9009\u62e9\u4ee5\u5f00\u53d1\u6a21\u5f0f\u5b89\u88c5\u9879\u76ee\u3002 \u8fd9\u79cd\u201c\u53ef\u7f16\u8f91\u6a21\u5f0f\uff08editable mode\uff09\u201d\u5b89\u88c5\u65b9\u5f0f\u5141\u8bb8\u60a8\u5bf9\u672c\u5730\u6e90\u7801\u7684\u4fee\u6539\u7acb\u5373\u751f\u6548\uff0c\u975e\u5e38\u9002\u5408\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u8d21\u732e\u4ee3\u7801\u3002</p> <p>\u63a8\u8350\u5148 Fork \u4ed3\u5e93\uff0c\u7136\u540e\u514b\u9686\u60a8\u81ea\u5df1\u7684 Fork\uff1a</p> <pre><code>git clone -b dev https://github.com/&lt;your-username&gt;/plotfig.git\ncd plotfig\npip install -e .\n</code></pre> <p>\u6b22\u8fce\u63d0\u4ea4 Issue \u6216 PR\uff01</p> <p>\u65e0\u8bba\u662f Bug \u62a5\u544a\u3001\u529f\u80fd\u5efa\u8bae\u3001\u8fd8\u662f\u6587\u6863\u6539\u8fdb\u3002</p> <p>\u90fd\u975e\u5e38\u6b22\u8fce\u5728 Issue \u4e2d\u63d0\u51fa\u3002</p> <p>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u63d0\u4ea4 PR\uff0c\u4e00\u8d77\u53d8\u5f97\u66f4\u5f3a \ud83d\ude4c\uff01</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#plotfig.bar","title":"plotfig.bar","text":""},{"location":"api/#plotfig.bar.plot_one_group_bar_figure","title":"plot_one_group_bar_figure","text":"<pre><code>plot_one_group_bar_figure(data, ax=None, labels_name=None, colors=None, edgecolor=None, gradient_color=False, colors_start=None, colors_end=None, show_dots=True, dots_color=None, y_lim=None, width=0.5, color_alpha=1, dots_size=35, errorbar_type='sd', title_name='', title_fontsize=12, title_pad=10, x_label_name='', x_label_ha='center', x_label_fontsize=10, x_tick_fontsize=8, x_tick_rotation=0, y_label_name='', y_label_fontsize=10, y_tick_fontsize=8, y_tick_rotation=0, statistic=False, test_method=['ttest_ind'], p_list=None, popmean=0, statistical_line_color='0.5', asterisk_fontsize=10, asterisk_color='k', ax_bottom_is_0=False, y_max_tick_is_1=False, math_text=True, one_decimal_place=False, percentage=False)\n</code></pre> <p>\u7ed8\u5236\u5355\u7ec4\u67f1\u72b6\u56fe\uff0c\u5305\u542b\u6563\u70b9\u3001\u8bef\u5dee\u6761\u548c\u7edf\u8ba1\u663e\u8457\u6027\u6807\u8bb0\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>data</code> <code>ndarray | Sequence[Sequence[Num] | ndarray]</code> <p>\u8f93\u5165\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e8c\u7ef4numpy\u6570\u7ec4\u6216\u5d4c\u5957\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4ee3\u8868\u4e00\u4e2a\u67f1\u72b6\u56fe\u7684\u6570\u636e\u70b9</p> \u5fc5\u9700 <code>ax</code> <code>Axes | None</code> <p>matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.</p> <code>None</code> <code>labels_name</code> <code>list[str] | None</code> <p>\u67f1\u72b6\u56fe\u7684\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.</p> <code>None</code> <code>colors</code> <code>list[str] | None</code> <p>\u67f1\u72b6\u56fe\u7684\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>edgecolor</code> <code>str | None</code> <p>\u67f1\u72b6\u56fe\u8fb9\u7f18\u989c\u8272. Defaults to None.</p> <code>None</code> <code>gradient_color</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528\u6e10\u53d8\u989c\u8272\u586b\u5145\u67f1\u72b6\u56fe. Defaults to False.</p> <code>False</code> <code>colors_start</code> <code>list[str] | None</code> <p>\u6e10\u53d8\u8272\u7684\u8d77\u59cb\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>colors_end</code> <code>list[str] | None</code> <p>\u6e10\u53d8\u8272\u7684\u7ed3\u675f\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>show_dots</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a\u6563\u70b9. Defaults to False.</p> <code>True</code> <code>dots_color</code> <code>list[list[str]] | None</code> <p>\u6563\u70b9\u7684\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>y_lim</code> <code>list[Num] | tuple[Num, Num] | None</code> <p>Y\u8f74\u7684\u8303\u56f4\u9650\u5236. Defaults to None.</p> <code>None</code> <code>width</code> <code>Num</code> <p>\u67f1\u72b6\u56fe\u7684\u5bbd\u5ea6. Defaults to 0.5.</p> <code>0.5</code> <code>color_alpha</code> <code>Num</code> <p>\u67f1\u72b6\u56fe\u989c\u8272\u7684\u900f\u660e\u5ea6. Defaults to 1.</p> <code>1</code> <code>dots_size</code> <code>Num</code> <p>\u6563\u70b9\u7684\u5927\u5c0f. Defaults to 35.</p> <code>35</code> <code>errorbar_type</code> <code>str</code> <p>\u8bef\u5dee\u6761\u7c7b\u578b\uff0c\u53ef\u9009 \"sd\"(\u6807\u51c6\u5dee) \u6216 \"se\"(\u6807\u51c6\u8bef). Defaults to \"sd\".</p> <code>'sd'</code> <code>title_name</code> <code>str</code> <p>\u56fe\u8868\u6807\u9898. Defaults to \"\".</p> <code>''</code> <code>title_fontsize</code> <code>Num</code> <p>\u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.</p> <code>12</code> <code>title_pad</code> <code>Num</code> <p>\u6807\u9898\u4e0e\u56fe\u8868\u7684\u95f4\u8ddd. Defaults to 10.</p> <code>10</code> <code>x_label_name</code> <code>str</code> <p>X\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".</p> <code>''</code> <code>x_label_ha</code> <code>str</code> <p>X\u8f74\u6807\u7b7e\u7684\u6c34\u5e73\u5bf9\u9f50\u65b9\u5f0f. Defaults to \"center\".</p> <code>'center'</code> <code>x_label_fontsize</code> <code>Num</code> <p>X\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>x_tick_fontsize</code> <code>Num</code> <p>X\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.</p> <code>8</code> <code>x_tick_rotation</code> <code>Num</code> <p>X\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.</p> <code>0</code> <code>y_label_name</code> <code>str</code> <p>Y\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".</p> <code>''</code> <code>y_label_fontsize</code> <code>Num</code> <p>Y\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>y_tick_fontsize</code> <code>Num</code> <p>Y\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.</p> <code>8</code> <code>y_tick_rotation</code> <code>Num</code> <p>Y\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.</p> <code>0</code> <code>statistic</code> <code>bool</code> <p>\u662f\u5426\u8fdb\u884c\u7edf\u8ba1\u663e\u8457\u6027\u5206\u6790. Defaults to False.</p> <code>False</code> <code>test_method</code> <code>list[str]</code> <p>\u7edf\u8ba1\u68c0\u9a8c\u65b9\u6cd5\u5217\u8868. Defaults to [\"ttest_ind\"].</p> <code>['ttest_ind']</code> <code>p_list</code> <code>list[float] | None</code> <p>\u9884\u8ba1\u7b97\u7684p\u503c\u5217\u8868\uff0c\u7528\u4e8e\u663e\u8457\u6027\u6807\u8bb0. Defaults to None.</p> <code>None</code> <code>popmean</code> <code>Num</code> <p>\u5355\u6837\u672ct\u68c0\u9a8c\u7684\u5047\u8bbe\u5747\u503c. Defaults to 0.</p> <code>0</code> <code>statistical_line_color</code> <code>str</code> <p>\u663e\u8457\u6027\u6807\u8bb0\u7ebf\u7684\u989c\u8272. Defaults to \"0.5\".</p> <code>'0.5'</code> <code>asterisk_fontsize</code> <code>Num</code> <p>\u663e\u8457\u6027\u661f\u53f7\u7684\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>asterisk_color</code> <code>str</code> <p>\u663e\u8457\u6027\u661f\u53f7\u7684\u989c\u8272. Defaults to \"k\".</p> <code>'k'</code> <code>ax_bottom_is_0</code> <code>bool</code> <p>Y\u8f74\u662f\u5426\u4ece0\u5f00\u59cb. Defaults to False.</p> <code>False</code> <code>y_max_tick_is_1</code> <code>bool</code> <p>Y\u8f74\u6700\u5927\u523b\u5ea6\u662f\u5426\u9650\u5236\u4e3a1. Defaults to False.</p> <code>False</code> <code>math_text</code> <code>bool</code> <p>\u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f. Defaults to True.</p> <code>True</code> <code>one_decimal_place</code> <code>bool</code> <p>Y\u8f74\u523b\u5ea6\u662f\u5426\u53ea\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570. Defaults to False.</p> <code>False</code> <code>percentage</code> <code>bool</code> <p>\u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u767e\u5206\u6bd4\u683c\u5f0f. Defaults to False.</p> <code>False</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5f53data\u6570\u636e\u683c\u5f0f\u65e0\u6548\u65f6\u629b\u51fa</p> <code>ValueError</code> <p>\u5f53errorbar_type\u4e0d\u662f\"sd\"\u6216\"se\"\u65f6\u629b\u51fa</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Axes | None</code> <p>Axes | None: \u8fd4\u56dematplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\u6216None</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/bar.py</code> <pre><code>def plot_one_group_bar_figure(\n    data: np.ndarray | Sequence[Sequence[Num] | np.ndarray],\n    ax: Axes | None = None,\n    labels_name: list[str] | None = None,\n    colors: list[str] | None = None,\n    edgecolor: str | None = None,\n    gradient_color: bool = False,\n    colors_start: list[str] | None = None,\n    colors_end: list[str] | None = None,\n    show_dots: bool = True,\n    dots_color: list[list[str]] | None = None,\n    y_lim: list[Num] | tuple[Num, Num] | None = None,\n    width: Num = 0.5,\n    color_alpha: Num = 1,\n    dots_size: Num = 35,\n    errorbar_type: str = \"sd\",\n    title_name: str = \"\",\n    title_fontsize: Num = 12,\n    title_pad: Num = 10,\n    x_label_name: str = \"\",\n    x_label_ha: str = \"center\",\n    x_label_fontsize: Num = 10,\n    x_tick_fontsize: Num = 8,\n    x_tick_rotation: Num = 0,\n    y_label_name: str = \"\",\n    y_label_fontsize: Num = 10,\n    y_tick_fontsize: Num = 8,\n    y_tick_rotation: Num = 0,\n    statistic: bool = False,\n    test_method: list[str] = [\"ttest_ind\"],\n    p_list: list[float] | None = None,\n    popmean: Num = 0,\n    statistical_line_color: str = \"0.5\",\n    asterisk_fontsize: Num = 10,\n    asterisk_color: str = \"k\",\n    ax_bottom_is_0: bool = False,\n    y_max_tick_is_1: bool = False,\n    math_text: bool = True,\n    one_decimal_place: bool = False,\n    percentage: bool = False,\n) -&gt; Axes | None:\n    \"\"\"\u7ed8\u5236\u5355\u7ec4\u67f1\u72b6\u56fe\uff0c\u5305\u542b\u6563\u70b9\u3001\u8bef\u5dee\u6761\u548c\u7edf\u8ba1\u663e\u8457\u6027\u6807\u8bb0\u3002\n\n    Args:\n        data (np.ndarray | Sequence[Sequence[Num] | np.ndarray]):\n            \u8f93\u5165\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e8c\u7ef4numpy\u6570\u7ec4\u6216\u5d4c\u5957\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4ee3\u8868\u4e00\u4e2a\u67f1\u72b6\u56fe\u7684\u6570\u636e\u70b9\n        ax (Axes | None, optional):\n            matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.\n        labels_name (list[str] | None, optional):\n            \u67f1\u72b6\u56fe\u7684\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.\n        colors (list[str] | None, optional):\n            \u67f1\u72b6\u56fe\u7684\u989c\u8272\u5217\u8868. Defaults to None.\n        edgecolor (str | None, optional):\n            \u67f1\u72b6\u56fe\u8fb9\u7f18\u989c\u8272. Defaults to None.\n        gradient_color (bool, optional):\n            \u662f\u5426\u4f7f\u7528\u6e10\u53d8\u989c\u8272\u586b\u5145\u67f1\u72b6\u56fe. Defaults to False.\n        colors_start (list[str] | None, optional):\n            \u6e10\u53d8\u8272\u7684\u8d77\u59cb\u989c\u8272\u5217\u8868. Defaults to None.\n        colors_end (list[str] | None, optional):\n            \u6e10\u53d8\u8272\u7684\u7ed3\u675f\u989c\u8272\u5217\u8868. Defaults to None.\n        show_dots (bool, optional):\n            \u662f\u5426\u663e\u793a\u6563\u70b9. Defaults to False.\n        dots_color (list[list[str]] | None, optional):\n            \u6563\u70b9\u7684\u989c\u8272\u5217\u8868. Defaults to None.\n        y_lim (list[Num] | tuple[Num, Num] | None, optional):\n            Y\u8f74\u7684\u8303\u56f4\u9650\u5236. Defaults to None.\n        width (Num, optional):\n            \u67f1\u72b6\u56fe\u7684\u5bbd\u5ea6. Defaults to 0.5.\n        color_alpha (Num, optional):\n            \u67f1\u72b6\u56fe\u989c\u8272\u7684\u900f\u660e\u5ea6. Defaults to 1.\n        dots_size (Num, optional):\n            \u6563\u70b9\u7684\u5927\u5c0f. Defaults to 35.\n        errorbar_type (str, optional):\n            \u8bef\u5dee\u6761\u7c7b\u578b\uff0c\u53ef\u9009 \"sd\"(\u6807\u51c6\u5dee) \u6216 \"se\"(\u6807\u51c6\u8bef). Defaults to \"sd\".\n        title_name (str, optional):\n            \u56fe\u8868\u6807\u9898. Defaults to \"\".\n        title_fontsize (Num, optional):\n            \u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.\n        title_pad (Num, optional):\n            \u6807\u9898\u4e0e\u56fe\u8868\u7684\u95f4\u8ddd. Defaults to 10.\n        x_label_name (str, optional):\n            X\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".\n        x_label_ha (str, optional):\n            X\u8f74\u6807\u7b7e\u7684\u6c34\u5e73\u5bf9\u9f50\u65b9\u5f0f. Defaults to \"center\".\n        x_label_fontsize (Num, optional):\n            X\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        x_tick_fontsize (Num, optional):\n            X\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.\n        x_tick_rotation (Num, optional):\n            X\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.\n        y_label_name (str, optional):\n            Y\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".\n        y_label_fontsize (Num, optional):\n            Y\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        y_tick_fontsize (Num, optional):\n            Y\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.\n        y_tick_rotation (Num, optional):\n            Y\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.\n        statistic (bool, optional):\n            \u662f\u5426\u8fdb\u884c\u7edf\u8ba1\u663e\u8457\u6027\u5206\u6790. Defaults to False.\n        test_method (list[str], optional):\n            \u7edf\u8ba1\u68c0\u9a8c\u65b9\u6cd5\u5217\u8868. Defaults to [\"ttest_ind\"].\n        p_list (list[float] | None, optional):\n            \u9884\u8ba1\u7b97\u7684p\u503c\u5217\u8868\uff0c\u7528\u4e8e\u663e\u8457\u6027\u6807\u8bb0. Defaults to None.\n        popmean (Num, optional):\n            \u5355\u6837\u672ct\u68c0\u9a8c\u7684\u5047\u8bbe\u5747\u503c. Defaults to 0.\n        statistical_line_color (str, optional):\n            \u663e\u8457\u6027\u6807\u8bb0\u7ebf\u7684\u989c\u8272. Defaults to \"0.5\".\n        asterisk_fontsize (Num, optional):\n            \u663e\u8457\u6027\u661f\u53f7\u7684\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        asterisk_color (str, optional):\n            \u663e\u8457\u6027\u661f\u53f7\u7684\u989c\u8272. Defaults to \"k\".\n        ax_bottom_is_0 (bool, optional):\n            Y\u8f74\u662f\u5426\u4ece0\u5f00\u59cb. Defaults to False.\n        y_max_tick_is_1 (bool, optional):\n            Y\u8f74\u6700\u5927\u523b\u5ea6\u662f\u5426\u9650\u5236\u4e3a1. Defaults to False.\n        math_text (bool, optional):\n            \u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f. Defaults to True.\n        one_decimal_place (bool, optional):\n            Y\u8f74\u523b\u5ea6\u662f\u5426\u53ea\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570. Defaults to False.\n        percentage (bool, optional):\n            \u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u767e\u5206\u6bd4\u683c\u5f0f. Defaults to False.\n\n    Raises:\n        ValueError: \u5f53data\u6570\u636e\u683c\u5f0f\u65e0\u6548\u65f6\u629b\u51fa\n        ValueError: \u5f53errorbar_type\u4e0d\u662f\"sd\"\u6216\"se\"\u65f6\u629b\u51fa\n\n    Returns:\n        Axes | None: \u8fd4\u56dematplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\u6216None\n    \"\"\"\n    # \u5904\u7406None\u503c\n    if not _is_valid_data(data):\n        raise ValueError(\"\u65e0\u6548\u7684 data\")\n    ax = ax or plt.gca()\n    labels_name = labels_name or [str(i) for i in range(len(data))]\n    colors = colors or [\"gray\"] * len(data)\n    # \u7edf\u4e00\u53c2\u6570\u578b\n    width = float(width)\n    color_alpha = float(color_alpha)\n    dots_size = float(dots_size)\n    title_fontsize = float(title_fontsize)\n    title_pad = float(title_pad)\n    x_label_fontsize = float(x_label_fontsize)\n    x_tick_fontsize = float(x_tick_fontsize)\n    x_tick_rotation = float(x_tick_rotation)\n    y_label_fontsize = float(y_label_fontsize)\n    y_tick_fontsize = float(y_tick_fontsize)\n    y_tick_rotation = float(y_tick_rotation)\n    popmean = float(popmean)\n    asterisk_fontsize = float(asterisk_fontsize)\n\n    x_positions = np.arange(len(labels_name))\n    means, sds, ses = [], [], []\n    scatter_positions = []\n    for i, d in enumerate(data):\n        mean, sd, se = _compute_summary(d)\n        means.append(mean)\n        sds.append(sd)\n        ses.append(se)\n        # \u521b\u5efa\u968f\u673a\u6570\u751f\u6210\u5668\n        rng = np.random.default_rng(seed=42)\n        scatter_x = rng.normal(i, 0.1, len(d))\n        print(scatter_x)\n        scatter_positions.append(scatter_x)\n    if errorbar_type == \"sd\":\n        error_values = sds\n    elif errorbar_type == \"se\":\n        error_values = ses\n    else:\n        raise ValueError(\"errorbar_type \u53ea\u80fd\u662f 'sd' \u6216\u8005 'se'\")\n\n    # \u7ed8\u5236\u67f1\u5b50\n    if gradient_color:\n        if colors_start is None:  # \u9ed8\u8ba4\u989c\u8272\n            colors_start = [\"#e38a48\"] * len(x_positions)  # \u5de6\u8fb9\u989c\u8272\n        if colors_end is None:  # \u9ed8\u8ba4\u989c\u8272\n            colors_end = [\"#4573a5\"] * len(x_positions)  # \u53f3\u8fb9\u989c\u8272\n        for x, h, c1, c2 in zip(x_positions, means, colors_start, colors_end):\n            # \u751f\u6210\u7ebf\u6027\u6e10\u53d8 colormap\n            cmap = LinearSegmentedColormap.from_list(\"grad_cmap\", [c1, \"white\", c2])\n            gradient = np.linspace(0, 1, 100).reshape(1, -1)  # \u6a2a\u5411\u6e10\u53d8\n            # \u8ba1\u7b97\u6e10\u53d8\u77e9\u5f62\u4f4d\u7f6e\uff1a\u8ddfbar\u5b8c\u5168\u5bf9\u9f50\n            extent = (float(x - width / 2), float(x + width / 2), 0, h)\n            # \u53e0\u52a0\u6e10\u53d8\u77e9\u5f62\uff08imshow\uff09\n            ax.imshow(gradient, aspect=\"auto\", cmap=cmap, extent=extent, zorder=0)\n    else:\n        ax.bar(\n            x_positions,\n            means,\n            width=width,\n            color=colors,\n            alpha=color_alpha,\n            edgecolor=edgecolor,\n        )\n\n    ax.errorbar(\n        x_positions,\n        means,\n        error_values,\n        fmt=\"none\",\n        linewidth=1,\n        capsize=3,\n        color=\"black\",\n    )\n\n    # \u7ed8\u5236\u6563\u70b9\n    if show_dots:\n        for i, d in enumerate(data):\n            if dots_color is None:\n                _add_scatter(ax, scatter_positions[i], d, [\"gray\"] * len(d), dots_size)\n            else:\n                _add_scatter(ax, scatter_positions[i], d, dots_color[i], dots_size)\n\n    # \u7f8e\u5316\n    ax.spines[[\"top\", \"right\"]].set_visible(False)\n    ax.set_title(\n        title_name,\n        fontsize=title_fontsize,\n        pad=float(title_pad),\n    )\n    # x\u8f74\n    ax.set_xlim(np.min(x_positions) - 0.5, np.max(x_positions) + 0.5)\n    ax.set_xlabel(x_label_name, fontsize=x_label_fontsize)\n    ax.set_xticks(x_positions)\n    ax.set_xticklabels(\n        labels_name,\n        fontsize=x_tick_fontsize,\n        rotation=x_tick_rotation,\n        ha=x_label_ha,\n        rotation_mode=\"anchor\",\n    )\n    # y\u8f74\n    ax.tick_params(\n        axis=\"y\",\n        labelsize=y_tick_fontsize,\n        rotation=y_tick_rotation,\n    )\n    ax.set_ylabel(y_label_name, fontsize=y_label_fontsize)\n    all_values = np.concatenate([np.asarray(x) for x in data]).ravel()\n    _set_yaxis(\n        ax,\n        all_values,\n        y_lim=y_lim,\n        ax_bottom_is_0=ax_bottom_is_0,\n        y_max_tick_is_1=y_max_tick_is_1,\n        math_text=math_text,\n        one_decimal_place=one_decimal_place,\n        percentage=percentage,\n    )\n\n    # \u6dfb\u52a0\u7edf\u8ba1\u663e\u8457\u6027\u6807\u8bb0\n    if statistic:\n        _statistics(\n            data,\n            test_method,\n            p_list,\n            popmean,\n            ax,\n            all_values,\n            statistical_line_color,\n            asterisk_fontsize,\n            asterisk_color,\n        )\n    return ax\n</code></pre>"},{"location":"api/#plotfig.bar.plot_one_group_violin_figure","title":"plot_one_group_violin_figure","text":"<pre><code>plot_one_group_violin_figure(data, ax=None, labels_name=None, width=0.8, colors=None, color_alpha=1, gradient_color=False, colors_start=None, colors_end=None, show_dots=False, dots_size=35, title_name='', title_fontsize=12, title_pad=10, x_label_name='', x_label_ha='center', x_label_fontsize=10, x_tick_fontsize=8, x_tick_rotation=0, y_label_name='', y_label_fontsize=10, y_tick_fontsize=8, y_tick_rotation=0, statistic=False, test_method=['ttest_ind'], popmean=0, p_list=None, statistical_line_color='0.5', asterisk_fontsize=10, asterisk_color='k', y_lim=None, ax_bottom_is_0=False, y_max_tick_is_1=False, math_text=True, one_decimal_place=False, percentage=False)\n</code></pre> <p>\u7ed8\u5236\u5355\u7ec4\u5c0f\u63d0\u7434\u56fe\uff0c\u53ef\u9009\u6563\u70b9\u53e0\u52a0\u3001\u6e10\u53d8\u586b\u8272\u548c\u7edf\u8ba1\u663e\u8457\u6027\u6807\u6ce8\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>data</code> <code>Sequence[list[float] | NDArray[float64]]</code> <p>\u8f93\u5165\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e8c\u7ef4numpy\u6570\u7ec4\u6216\u5d4c\u5957\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4ee3\u8868\u4e00\u4e2a\u5c0f\u63d0\u7434\u7684\u6570\u636e\u70b9</p> \u5fc5\u9700 <code>ax</code> <code>Axes | None</code> <p>matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.</p> <code>None</code> <code>labels_name</code> <code>list[str] | None</code> <p>\u5c0f\u63d0\u7434\u56fe\u7684\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.</p> <code>None</code> <code>width</code> <code>Num</code> <p>\u5c0f\u63d0\u7434\u56fe\u7684\u5bbd\u5ea6. Defaults to 0.8.</p> <code>0.8</code> <code>colors</code> <code>list[str] | None</code> <p>\u5c0f\u63d0\u7434\u56fe\u7684\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>color_alpha</code> <code>Num</code> <p>\u5c0f\u63d0\u7434\u56fe\u989c\u8272\u7684\u900f\u660e\u5ea6. Defaults to 1.</p> <code>1</code> <code>gradient_color</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528\u6e10\u53d8\u989c\u8272\u586b\u5145\u5c0f\u63d0\u7434\u56fe. Defaults to False.</p> <code>False</code> <code>colors_start</code> <code>list[str] | None</code> <p>\u6e10\u53d8\u8272\u7684\u8d77\u59cb\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>colors_end</code> <code>list[str] | None</code> <p>\u6e10\u53d8\u8272\u7684\u7ed3\u675f\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>show_dots</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a\u6563\u70b9. Defaults to False.</p> <code>False</code> <code>dots_size</code> <code>Num</code> <p>\u6563\u70b9\u7684\u5927\u5c0f. Defaults to 35.</p> <code>35</code> <code>title_name</code> <code>str</code> <p>\u56fe\u8868\u6807\u9898. Defaults to \"\".</p> <code>''</code> <code>title_fontsize</code> <code>Num</code> <p>\u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.</p> <code>12</code> <code>title_pad</code> <code>Num</code> <p>\u6807\u9898\u4e0e\u56fe\u8868\u7684\u95f4\u8ddd. Defaults to 10.</p> <code>10</code> <code>x_label_name</code> <code>str</code> <p>X\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".</p> <code>''</code> <code>x_label_ha</code> <code>str</code> <p>X\u8f74\u6807\u7b7e\u7684\u6c34\u5e73\u5bf9\u9f50\u65b9\u5f0f. Defaults to \"center\".</p> <code>'center'</code> <code>x_label_fontsize</code> <code>Num</code> <p>X\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>x_tick_fontsize</code> <code>Num</code> <p>X\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.</p> <code>8</code> <code>x_tick_rotation</code> <code>Num</code> <p>X\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.</p> <code>0</code> <code>y_label_name</code> <code>str</code> <p>Y\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".</p> <code>''</code> <code>y_label_fontsize</code> <code>Num</code> <p>Y\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>y_tick_fontsize</code> <code>Num</code> <p>Y\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.</p> <code>8</code> <code>y_tick_rotation</code> <code>Num</code> <p>Y\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.</p> <code>0</code> <code>statistic</code> <code>bool</code> <p>\u662f\u5426\u8fdb\u884c\u7edf\u8ba1\u663e\u8457\u6027\u5206\u6790. Defaults to False.</p> <code>False</code> <code>test_method</code> <code>list[str]</code> <p>\u7edf\u8ba1\u68c0\u9a8c\u65b9\u6cd5\u5217\u8868. Defaults to [\"ttest_ind\"].</p> <code>['ttest_ind']</code> <code>popmean</code> <code>Num</code> <p>\u5355\u6837\u672ct\u68c0\u9a8c\u7684\u5047\u8bbe\u5747\u503c. Defaults to 0.</p> <code>0</code> <code>p_list</code> <code>list[float] | None</code> <p>\u9884\u8ba1\u7b97\u7684p\u503c\u5217\u8868\uff0c\u7528\u4e8e\u663e\u8457\u6027\u6807\u8bb0. Defaults to None.</p> <code>None</code> <code>statistical_line_color</code> <code>str</code> <p>\u663e\u8457\u6027\u6807\u8bb0\u7ebf\u7684\u989c\u8272. Defaults to \"0.5\".</p> <code>'0.5'</code> <code>asterisk_fontsize</code> <code>Num</code> <p>\u663e\u8457\u6027\u661f\u53f7\u7684\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>asterisk_color</code> <code>str</code> <p>\u663e\u8457\u6027\u661f\u53f7\u7684\u989c\u8272. Defaults to \"k\".</p> <code>'k'</code> <code>y_lim</code> <code>list[Num] | tuple[Num, Num] | None</code> <p>Y\u8f74\u7684\u8303\u56f4\u9650\u5236. Defaults to None.</p> <code>None</code> <code>ax_bottom_is_0</code> <code>bool</code> <p>Y\u8f74\u662f\u5426\u4ece0\u5f00\u59cb. Defaults to False.</p> <code>False</code> <code>y_max_tick_is_1</code> <code>bool</code> <p>Y\u8f74\u6700\u5927\u523b\u5ea6\u662f\u5426\u9650\u5236\u4e3a1. Defaults to False.</p> <code>False</code> <code>math_text</code> <code>bool</code> <p>\u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f. Defaults to True.</p> <code>True</code> <code>one_decimal_place</code> <code>bool</code> <p>Y\u8f74\u523b\u5ea6\u662f\u5426\u53ea\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570. Defaults to False.</p> <code>False</code> <code>percentage</code> <code>bool</code> <p>\u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u767e\u5206\u6bd4\u683c\u5f0f. Defaults to False.</p> <code>False</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5f53data\u6570\u636e\u683c\u5f0f\u65e0\u6548\u65f6\u629b\u51fa</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Axes | None</code> <p>Axes | None: \u8fd4\u56dematplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\u6216None</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/bar.py</code> <pre><code>def plot_one_group_violin_figure(\n    data: Sequence[list[float] | NDArray[np.float64]],\n    ax: Axes | None = None,\n    labels_name: list[str] | None = None,\n    width: Num = 0.8,\n    colors: list[str] | None = None,\n    color_alpha: Num = 1,\n    gradient_color: bool = False,\n    colors_start: list[str] | None = None,\n    colors_end: list[str] | None = None,\n    show_dots: bool = False,\n    dots_size: Num = 35,\n    title_name: str = \"\",\n    title_fontsize: Num = 12,\n    title_pad: Num = 10,\n    x_label_name: str = \"\",\n    x_label_ha: str = \"center\",\n    x_label_fontsize: Num = 10,\n    x_tick_fontsize: Num = 8,\n    x_tick_rotation: Num = 0,\n    y_label_name: str = \"\",\n    y_label_fontsize: Num = 10,\n    y_tick_fontsize: Num = 8,\n    y_tick_rotation: Num = 0,\n    statistic: bool = False,\n    test_method: list[str] = [\"ttest_ind\"],\n    popmean: Num = 0,\n    p_list: list[float] | None = None,\n    statistical_line_color: str = \"0.5\",\n    asterisk_fontsize: Num = 10,\n    asterisk_color: str = \"k\",\n    y_lim: list[Num] | tuple[Num, Num] | None = None,\n    ax_bottom_is_0: bool = False,\n    y_max_tick_is_1: bool = False,\n    math_text: bool = True,\n    one_decimal_place: bool = False,\n    percentage: bool = False,\n) -&gt; Axes | None:\n    \"\"\"\u7ed8\u5236\u5355\u7ec4\u5c0f\u63d0\u7434\u56fe\uff0c\u53ef\u9009\u6563\u70b9\u53e0\u52a0\u3001\u6e10\u53d8\u586b\u8272\u548c\u7edf\u8ba1\u663e\u8457\u6027\u6807\u6ce8\u3002\n\n    Args:\n        data (Sequence[list[float] | NDArray[np.float64]]):\n            \u8f93\u5165\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e8c\u7ef4numpy\u6570\u7ec4\u6216\u5d4c\u5957\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4ee3\u8868\u4e00\u4e2a\u5c0f\u63d0\u7434\u7684\u6570\u636e\u70b9\n        ax (Axes | None, optional):\n            matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.\n        labels_name (list[str] | None, optional):\n            \u5c0f\u63d0\u7434\u56fe\u7684\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.\n        width (Num, optional):\n            \u5c0f\u63d0\u7434\u56fe\u7684\u5bbd\u5ea6. Defaults to 0.8.\n        colors (list[str] | None, optional):\n            \u5c0f\u63d0\u7434\u56fe\u7684\u989c\u8272\u5217\u8868. Defaults to None.\n        color_alpha (Num, optional):\n            \u5c0f\u63d0\u7434\u56fe\u989c\u8272\u7684\u900f\u660e\u5ea6. Defaults to 1.\n        gradient_color (bool, optional):\n            \u662f\u5426\u4f7f\u7528\u6e10\u53d8\u989c\u8272\u586b\u5145\u5c0f\u63d0\u7434\u56fe. Defaults to False.\n        colors_start (list[str] | None, optional):\n            \u6e10\u53d8\u8272\u7684\u8d77\u59cb\u989c\u8272\u5217\u8868. Defaults to None.\n        colors_end (list[str] | None, optional):\n            \u6e10\u53d8\u8272\u7684\u7ed3\u675f\u989c\u8272\u5217\u8868. Defaults to None.\n        show_dots (bool, optional):\n            \u662f\u5426\u663e\u793a\u6563\u70b9. Defaults to False.\n        dots_size (Num, optional):\n            \u6563\u70b9\u7684\u5927\u5c0f. Defaults to 35.\n        title_name (str, optional):\n            \u56fe\u8868\u6807\u9898. Defaults to \"\".\n        title_fontsize (Num, optional):\n            \u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.\n        title_pad (Num, optional):\n            \u6807\u9898\u4e0e\u56fe\u8868\u7684\u95f4\u8ddd. Defaults to 10.\n        x_label_name (str, optional):\n            X\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".\n        x_label_ha (str, optional):\n            X\u8f74\u6807\u7b7e\u7684\u6c34\u5e73\u5bf9\u9f50\u65b9\u5f0f. Defaults to \"center\".\n        x_label_fontsize (Num, optional):\n            X\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        x_tick_fontsize (Num, optional):\n            X\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.\n        x_tick_rotation (Num, optional):\n            X\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.\n        y_label_name (str, optional):\n            Y\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".\n        y_label_fontsize (Num, optional):\n            Y\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        y_tick_fontsize (Num, optional):\n            Y\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.\n        y_tick_rotation (Num, optional):\n            Y\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.\n        statistic (bool, optional):\n            \u662f\u5426\u8fdb\u884c\u7edf\u8ba1\u663e\u8457\u6027\u5206\u6790. Defaults to False.\n        test_method (list[str], optional):\n            \u7edf\u8ba1\u68c0\u9a8c\u65b9\u6cd5\u5217\u8868. Defaults to [\"ttest_ind\"].\n        popmean (Num, optional):\n            \u5355\u6837\u672ct\u68c0\u9a8c\u7684\u5047\u8bbe\u5747\u503c. Defaults to 0.\n        p_list (list[float] | None, optional):\n            \u9884\u8ba1\u7b97\u7684p\u503c\u5217\u8868\uff0c\u7528\u4e8e\u663e\u8457\u6027\u6807\u8bb0. Defaults to None.\n        statistical_line_color (str, optional):\n            \u663e\u8457\u6027\u6807\u8bb0\u7ebf\u7684\u989c\u8272. Defaults to \"0.5\".\n        asterisk_fontsize (Num, optional):\n            \u663e\u8457\u6027\u661f\u53f7\u7684\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        asterisk_color (str, optional):\n            \u663e\u8457\u6027\u661f\u53f7\u7684\u989c\u8272. Defaults to \"k\".\n        y_lim (list[Num] | tuple[Num, Num] | None, optional):\n            Y\u8f74\u7684\u8303\u56f4\u9650\u5236. Defaults to None.\n        ax_bottom_is_0 (bool, optional):\n            Y\u8f74\u662f\u5426\u4ece0\u5f00\u59cb. Defaults to False.\n        y_max_tick_is_1 (bool, optional):\n            Y\u8f74\u6700\u5927\u523b\u5ea6\u662f\u5426\u9650\u5236\u4e3a1. Defaults to False.\n        math_text (bool, optional):\n            \u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f. Defaults to True.\n        one_decimal_place (bool, optional):\n            Y\u8f74\u523b\u5ea6\u662f\u5426\u53ea\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570. Defaults to False.\n        percentage (bool, optional):\n            \u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u767e\u5206\u6bd4\u683c\u5f0f. Defaults to False.\n\n    Raises:\n        ValueError: \u5f53data\u6570\u636e\u683c\u5f0f\u65e0\u6548\u65f6\u629b\u51fa\n\n    Returns:\n        Axes | None: \u8fd4\u56dematplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\u6216None\n    \"\"\"\n    # \u5904\u7406None\u503c\n    if not _is_valid_data(data):\n        raise ValueError(\"\u65e0\u6548\u7684 data\")\n    ax = ax or plt.gca()\n    labels_name = labels_name or [str(i) for i in range(len(data))]\n    colors = colors or [\"gray\"] * len(data)\n    # \u7edf\u4e00\u53c2\u6570\u578b\n    width = float(width)\n    color_alpha = float(color_alpha)\n    dots_size = float(dots_size)\n    title_fontsize = float(title_fontsize)\n    title_pad = float(title_pad)\n    x_label_fontsize = float(x_label_fontsize)\n    x_tick_fontsize = float(x_tick_fontsize)\n    x_tick_rotation = float(x_tick_rotation)\n    y_label_fontsize = float(y_label_fontsize)\n    y_tick_fontsize = float(y_tick_fontsize)\n    y_tick_rotation = float(y_tick_rotation)\n    popmean = float(popmean)\n    asterisk_fontsize = float(asterisk_fontsize)\n\n    def _draw_gradient_violin(ax, data, pos, width, c1, c2, color_alpha):\n        # KDE\u4f30\u8ba1\n        kde = stats.gaussian_kde(data)\n        buffer = (max(data) - min(data)) / 5\n        y = np.linspace(min(data) - buffer, max(data) + buffer, 300)\n        ymax = max(data) + buffer\n        ymin = min(data) - buffer\n        density = kde(y)\n        density = density / density.max() * (width / 2)  # \u63a7\u5236violin\u5bbd\u5ea6\n        # violin\u5de6\u53f3\u8fb9\u754c\n        x_left = pos - density\n        x_right = pos + density\n        # \u7ec4\u5408\u5c01\u95ed\u8fb9\u754c\n        verts = np.concatenate(\n            [np.stack([x_left, y], axis=1), np.stack([x_right[::-1], y[::-1]], axis=1)]\n        )\n        # \u6784\u5efa\u6e10\u53d8\u56fe\u50cf\n        grad_width = 200\n        grad_height = 300\n        gradient = np.linspace(0, 1, grad_width)\n        if c1 == c2:\n            rgba = to_rgba(c1, alpha=color_alpha)\n            cmap = LinearSegmentedColormap.from_list(\"cmap\", [rgba, rgba])\n            gradient_rgb = plt.get_cmap(cmap)(gradient)\n        else:\n            cmap = LinearSegmentedColormap.from_list(\"cmap\", [c1, \"white\", c2])\n            gradient_rgb = plt.get_cmap(cmap)(gradient)[..., :3]\n        gradient_img = np.tile(gradient_rgb, (grad_height, 1, 1))\n        # \u663e\u793a\u56fe\u50cf\u5e76\u88c1\u526a\u6210violin\u5f62\u72b6\n        im = ax.imshow(\n            gradient_img,\n            extent=[pos - width / 2, pos + width / 2, y.min(), y.max()],\n            origin=\"lower\",\n            aspect=\"auto\",\n            zorder=1,\n        )\n        # \u6dfb\u52a0\u8fb9\u754c\u7ebf\u5e76\u4f5c\u4e3aclip\n        poly = Polygon(\n            verts,\n            closed=True,\n            facecolor=\"none\",\n            edgecolor=\"black\",\n            linewidth=1.2,\n            zorder=2,\n        )\n        ax.add_patch(poly)\n        im.set_clip_path(poly)\n        # \u6dfb\u52a0 box \u5143\u7d20\n        q1 = np.percentile(data, 25)\n        q3 = np.percentile(data, 75)\n        median = np.median(data)\n        # \u6dfb\u52a0 IQR box\uff08\u9ed1\u8272\u77e9\u5f62\uff09\n        ax.add_patch(\n            Rectangle(\n                (pos - width / 16, q1),  # \u5de6\u4e0b\u89d2\u5750\u6807\n                float(width / 8),  # \u5bbd\u5ea6\n                q3 - q1,  # \u9ad8\u5ea6\n                facecolor=\"black\",\n                alpha=0.7,\n            )\n        )\n        # \u6dfb\u52a0\u767d\u8272\u4e2d\u4f4d\u6570\u70b9\n        ax.plot(pos, median, \"o\", color=\"white\", markersize=5, zorder=3)\n        return ymax, ymin\n\n    ymax_lst, ymin_lst = [], []\n    for i, d in enumerate(data):\n        if gradient_color:\n            if colors_start is None:\n                colors_start = [\"#e38a48\"] * len(data)\n            if colors_end is None:  # \u9ed8\u8ba4\u989c\u8272\n                colors_end = [\"#4573a5\"] * len(data)\n            c1 = colors_start[i]\n            c2 = colors_end[i]\n        else:\n            c1 = c2 = colors[i]\n        ymax, ymin = _draw_gradient_violin(ax, d, i, width, c1, c2, color_alpha)\n\n        ymax_lst.append(ymax)\n        ymin_lst.append(ymin)\n    ymax = max(ymax_lst)\n    ymin = min(ymin_lst)\n\n    # \u7ed8\u5236\u6563\u70b9\uff08\u590d\u7528\u73b0\u6709\u51fd\u6570\uff09\n    if show_dots:\n        # \u521b\u5efa\u968f\u673a\u6570\u751f\u6210\u5668\n        rng = np.random.default_rng(seed=42)\n        scatter_positions = [rng.normal(i, 0.1, len(d)) for i, d in enumerate(data)]\n        for i, d in enumerate(data):\n            _add_scatter(ax, scatter_positions[i], d, colors[i], dots_size)\n\n    # \u7f8e\u5316\n    ax.spines[[\"top\", \"right\"]].set_visible(False)\n    ax.set_title(title_name, fontsize=title_fontsize, pad=title_pad)\n    # x\u8f74\n    ax.set_xlim(-0.5, len(data) - 0.5)\n    ax.set_xlabel(x_label_name, fontsize=x_label_fontsize)\n    ax.set_xticks(np.arange(len(data)))\n    ax.set_xticklabels(\n        labels_name,\n        fontsize=x_tick_fontsize,\n        rotation=x_tick_rotation,\n        ha=x_label_ha,\n        rotation_mode=\"anchor\",\n    )\n    # y\u8f74\n    ax.tick_params(\n        axis=\"y\",\n        labelsize=y_tick_fontsize,\n        rotation=y_tick_rotation,\n    )\n    ax.set_ylabel(y_label_name, fontsize=y_label_fontsize)\n    all_values = [ymin, ymax]\n    _set_yaxis(\n        ax,\n        all_values,\n        y_lim=y_lim,\n        ax_bottom_is_0=ax_bottom_is_0,\n        y_max_tick_is_1=y_max_tick_is_1,\n        math_text=math_text,\n        one_decimal_place=one_decimal_place,\n        percentage=percentage,\n    )\n\n    # \u6dfb\u52a0\u7edf\u8ba1\u6807\u8bb0\uff08\u590d\u7528\u73b0\u6709\u51fd\u6570\uff09\n    if statistic:\n        _statistics(\n            data,\n            test_method,\n            p_list,\n            popmean,\n            ax,\n            all_values,\n            statistical_line_color,\n            asterisk_fontsize,\n            asterisk_color,\n        )\n\n    return ax\n</code></pre>"},{"location":"api/#plotfig.bar.plot_multi_group_bar_figure","title":"plot_multi_group_bar_figure","text":"<pre><code>plot_multi_group_bar_figure(data, ax=None, group_labels=None, bar_labels=None, bar_width=0.2, bar_gap=0.1, bar_color=None, errorbar_type='sd', dots_color='gray', dots_size=35, legend=True, legend_position=(1.2, 1), title_name='', title_fontsize=12, title_pad=10, x_label_name='', x_label_ha='center', x_label_fontsize=10, x_tick_fontsize=8, x_tick_rotation=0, y_label_name='', y_label_fontsize=10, y_tick_fontsize=8, y_tick_rotation=0, statistic=False, test_method='external', p_list=None, line_color='0.5', asterisk_fontsize=10, asterisk_color='k', y_lim=None, ax_bottom_is_0=False, y_max_tick_is_1=False, math_text=True, one_decimal_place=False, percentage=False)\n</code></pre> <p>\u7ed8\u5236\u591a\u7ec4\u67f1\u72b6\u56fe\uff0c\u5305\u542b\u6563\u70b9\u3001\u8bef\u5dee\u6761\u3001\u663e\u8457\u6027\u6807\u6ce8\u548c\u56fe\u4f8b\u7b49\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>data</code> <code>DataType</code> <p>\u8f93\u5165\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e09\u7ef4numpy\u6570\u7ec4\u3001\u4e8c\u7ef4numpy\u6570\u7ec4\u5217\u8868\u6216\u5d4c\u5957\u5e8f\u5217</p> \u5fc5\u9700 <code>ax</code> <code>Axes | None</code> <p>matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.</p> <code>None</code> <code>group_labels</code> <code>list[str] | None</code> <p>\u7ec4\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.</p> <code>None</code> <code>bar_labels</code> <code>list[str] | None</code> <p>\u67f1\u72b6\u56fe\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.</p> <code>None</code> <code>bar_width</code> <code>Num</code> <p>\u67f1\u72b6\u56fe\u7684\u5bbd\u5ea6. Defaults to 0.2.</p> <code>0.2</code> <code>bar_gap</code> <code>Num</code> <p>\u67f1\u72b6\u56fe\u4e4b\u95f4\u7684\u95f4\u9694. Defaults to 0.1.</p> <code>0.1</code> <code>bar_color</code> <code>list[str] | None</code> <p>\u67f1\u72b6\u56fe\u7684\u989c\u8272\u5217\u8868. Defaults to None.</p> <code>None</code> <code>errorbar_type</code> <code>str</code> <p>\u8bef\u5dee\u6761\u7c7b\u578b\uff0c\u53ef\u9009 \"sd\"(\u6807\u51c6\u5dee) \u6216 \"se\"(\u6807\u51c6\u8bef). Defaults to \"sd\".</p> <code>'sd'</code> <code>dots_color</code> <code>str</code> <p>\u6563\u70b9\u7684\u989c\u8272. Defaults to \"gray\".</p> <code>'gray'</code> <code>dots_size</code> <code>int</code> <p>\u6563\u70b9\u7684\u5927\u5c0f. Defaults to 35.</p> <code>35</code> <code>legend</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a\u56fe\u4f8b. Defaults to True.</p> <code>True</code> <code>legend_position</code> <code>tuple[Num, Num]</code> <p>\u56fe\u4f8b\u4f4d\u7f6e\u5750\u6807. Defaults to (1.2, 1).</p> <code>(1.2, 1)</code> <code>title_name</code> <code>str</code> <p>\u56fe\u8868\u6807\u9898. Defaults to \"\".</p> <code>''</code> <code>title_fontsize</code> <code>int</code> <p>\u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.</p> <code>12</code> <code>title_pad</code> <code>int</code> <p>\u6807\u9898\u4e0e\u56fe\u8868\u7684\u95f4\u8ddd. Defaults to 10.</p> <code>10</code> <code>x_label_name</code> <code>str</code> <p>X\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".</p> <code>''</code> <code>x_label_ha</code> <code>str</code> <p>X\u8f74\u6807\u7b7e\u7684\u6c34\u5e73\u5bf9\u9f50\u65b9\u5f0f. Defaults to \"center\".</p> <code>'center'</code> <code>x_label_fontsize</code> <code>int</code> <p>X\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>x_tick_fontsize</code> <code>int</code> <p>X\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.</p> <code>8</code> <code>x_tick_rotation</code> <code>int</code> <p>X\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.</p> <code>0</code> <code>y_label_name</code> <code>str</code> <p>Y\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".</p> <code>''</code> <code>y_label_fontsize</code> <code>int</code> <p>Y\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>y_tick_fontsize</code> <code>int</code> <p>Y\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.</p> <code>8</code> <code>y_tick_rotation</code> <code>int</code> <p>Y\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.</p> <code>0</code> <code>statistic</code> <code>bool</code> <p>\u662f\u5426\u8fdb\u884c\u7edf\u8ba1\u663e\u8457\u6027\u5206\u6790. Defaults to False.</p> <code>False</code> <code>test_method</code> <code>str</code> <p>\u7edf\u8ba1\u68c0\u9a8c\u65b9\u6cd5\uff0c\u76ee\u524d\u4ec5\u652f\u6301\"external\". Defaults to \"external\".</p> <code>'external'</code> <code>p_list</code> <code>list[list[Num]] | None</code> <p>\u9884\u8ba1\u7b97\u7684p\u503c\u5217\u8868\uff0c\u7528\u4e8e\u663e\u8457\u6027\u6807\u8bb0. Defaults to None.</p> <code>None</code> <code>line_color</code> <code>str</code> <p>\u663e\u8457\u6027\u6807\u8bb0\u7ebf\u7684\u989c\u8272. Defaults to \"0.5\".</p> <code>'0.5'</code> <code>asterisk_fontsize</code> <code>int</code> <p>\u663e\u8457\u6027\u661f\u53f7\u7684\u5b57\u4f53\u5927\u5c0f. Defaults to 10.</p> <code>10</code> <code>asterisk_color</code> <code>str</code> <p>\u663e\u8457\u6027\u661f\u53f7\u7684\u989c\u8272. Defaults to \"k\".</p> <code>'k'</code> <code>y_lim</code> <code>list[Num] | tuple[Num, Num] | None</code> <p>Y\u8f74\u7684\u8303\u56f4\u9650\u5236. Defaults to None.</p> <code>None</code> <code>ax_bottom_is_0</code> <code>bool</code> <p>Y\u8f74\u662f\u5426\u4ece0\u5f00\u59cb. Defaults to False.</p> <code>False</code> <code>y_max_tick_is_1</code> <code>bool</code> <p>Y\u8f74\u6700\u5927\u523b\u5ea6\u662f\u5426\u9650\u5236\u4e3a1. Defaults to False.</p> <code>False</code> <code>math_text</code> <code>bool</code> <p>\u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f. Defaults to True.</p> <code>True</code> <code>one_decimal_place</code> <code>bool</code> <p>Y\u8f74\u523b\u5ea6\u662f\u5426\u53ea\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570. Defaults to False.</p> <code>False</code> <code>percentage</code> <code>bool</code> <p>\u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u767e\u5206\u6bd4\u683c\u5f0f. Defaults to False.</p> <code>False</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5f53data\u6570\u636e\u683c\u5f0f\u65e0\u6548\u65f6\u629b\u51fa</p> <code>ValueError</code> <p>\u5f53test_method\u4e0d\u662f\"external\"\u65f6\u629b\u51fa\uff08\u591a\u7ec4\u6570\u636e\u7edf\u8ba1\u6d4b\u8bd5\u65b9\u6cd5\u6682\u65f6\u4ec5\u652f\u6301external\u65b9\u6cd5\uff09</p> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>Axes</code> <code>Axes</code> <p>\u8fd4\u56dematplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/bar.py</code> <pre><code>def plot_multi_group_bar_figure(\n    data: DataType,\n    ax: Axes | None = None,\n    group_labels: list[str] | None = None,\n    bar_labels: list[str] | None = None,\n    bar_width: Num = 0.2,\n    bar_gap: Num = 0.1,\n    bar_color: list[str] | None = None,\n    errorbar_type: str = \"sd\",\n    dots_color: str = \"gray\",\n    dots_size: int = 35,\n    legend: bool = True,\n    legend_position: tuple[Num, Num] = (1.2, 1),\n    title_name: str = \"\",\n    title_fontsize=12,\n    title_pad=10,\n    x_label_name: str = \"\",\n    x_label_ha=\"center\",\n    x_label_fontsize=10,\n    x_tick_fontsize=8,\n    x_tick_rotation=0,\n    y_label_name: str = \"\",\n    y_label_fontsize=10,\n    y_tick_fontsize=8,\n    y_tick_rotation=0,\n    statistic: bool = False,\n    test_method: str = \"external\",\n    p_list: list[list[Num]] | None = None,\n    line_color=\"0.5\",\n    asterisk_fontsize=10,\n    asterisk_color=\"k\",\n    y_lim: list[Num] | tuple[Num, Num] | None = None,\n    ax_bottom_is_0: bool = False,\n    y_max_tick_is_1: bool = False,\n    math_text: bool = True,\n    one_decimal_place: bool = False,\n    percentage: bool = False,\n) -&gt; Axes:\n    \"\"\"\u7ed8\u5236\u591a\u7ec4\u67f1\u72b6\u56fe\uff0c\u5305\u542b\u6563\u70b9\u3001\u8bef\u5dee\u6761\u3001\u663e\u8457\u6027\u6807\u6ce8\u548c\u56fe\u4f8b\u7b49\u3002\n\n    Args:\n        data (DataType):\n            \u8f93\u5165\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u4e09\u7ef4numpy\u6570\u7ec4\u3001\u4e8c\u7ef4numpy\u6570\u7ec4\u5217\u8868\u6216\u5d4c\u5957\u5e8f\u5217\n        ax (Axes | None, optional):\n            matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.\n        group_labels (list[str] | None, optional):\n            \u7ec4\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.\n        bar_labels (list[str] | None, optional):\n            \u67f1\u72b6\u56fe\u6807\u7b7e\u540d\u79f0\u5217\u8868. Defaults to None.\n        bar_width (Num, optional):\n            \u67f1\u72b6\u56fe\u7684\u5bbd\u5ea6. Defaults to 0.2.\n        bar_gap (Num, optional):\n            \u67f1\u72b6\u56fe\u4e4b\u95f4\u7684\u95f4\u9694. Defaults to 0.1.\n        bar_color (list[str] | None, optional):\n            \u67f1\u72b6\u56fe\u7684\u989c\u8272\u5217\u8868. Defaults to None.\n        errorbar_type (str, optional):\n            \u8bef\u5dee\u6761\u7c7b\u578b\uff0c\u53ef\u9009 \"sd\"(\u6807\u51c6\u5dee) \u6216 \"se\"(\u6807\u51c6\u8bef). Defaults to \"sd\".\n        dots_color (str, optional):\n            \u6563\u70b9\u7684\u989c\u8272. Defaults to \"gray\".\n        dots_size (int, optional):\n            \u6563\u70b9\u7684\u5927\u5c0f. Defaults to 35.\n        legend (bool, optional):\n            \u662f\u5426\u663e\u793a\u56fe\u4f8b. Defaults to True.\n        legend_position (tuple[Num, Num], optional):\n            \u56fe\u4f8b\u4f4d\u7f6e\u5750\u6807. Defaults to (1.2, 1).\n        title_name (str, optional):\n            \u56fe\u8868\u6807\u9898. Defaults to \"\".\n        title_fontsize (int, optional):\n            \u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.\n        title_pad (int, optional):\n            \u6807\u9898\u4e0e\u56fe\u8868\u7684\u95f4\u8ddd. Defaults to 10.\n        x_label_name (str, optional):\n            X\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".\n        x_label_ha (str, optional):\n            X\u8f74\u6807\u7b7e\u7684\u6c34\u5e73\u5bf9\u9f50\u65b9\u5f0f. Defaults to \"center\".\n        x_label_fontsize (int, optional):\n            X\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        x_tick_fontsize (int, optional):\n            X\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.\n        x_tick_rotation (int, optional):\n            X\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.\n        y_label_name (str, optional):\n            Y\u8f74\u6807\u7b7e\u540d\u79f0. Defaults to \"\".\n        y_label_fontsize (int, optional):\n            Y\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        y_tick_fontsize (int, optional):\n            Y\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f. Defaults to 8.\n        y_tick_rotation (int, optional):\n            Y\u8f74\u523b\u5ea6\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.\n        statistic (bool, optional):\n            \u662f\u5426\u8fdb\u884c\u7edf\u8ba1\u663e\u8457\u6027\u5206\u6790. Defaults to False.\n        test_method (str, optional):\n            \u7edf\u8ba1\u68c0\u9a8c\u65b9\u6cd5\uff0c\u76ee\u524d\u4ec5\u652f\u6301\"external\". Defaults to \"external\".\n        p_list (list[list[Num]] | None, optional):\n            \u9884\u8ba1\u7b97\u7684p\u503c\u5217\u8868\uff0c\u7528\u4e8e\u663e\u8457\u6027\u6807\u8bb0. Defaults to None.\n        line_color (str, optional):\n            \u663e\u8457\u6027\u6807\u8bb0\u7ebf\u7684\u989c\u8272. Defaults to \"0.5\".\n        asterisk_fontsize (int, optional):\n            \u663e\u8457\u6027\u661f\u53f7\u7684\u5b57\u4f53\u5927\u5c0f. Defaults to 10.\n        asterisk_color (str, optional):\n            \u663e\u8457\u6027\u661f\u53f7\u7684\u989c\u8272. Defaults to \"k\".\n        y_lim (list[Num] | tuple[Num, Num] | None, optional):\n            Y\u8f74\u7684\u8303\u56f4\u9650\u5236. Defaults to None.\n        ax_bottom_is_0 (bool, optional):\n            Y\u8f74\u662f\u5426\u4ece0\u5f00\u59cb. Defaults to False.\n        y_max_tick_is_1 (bool, optional):\n            Y\u8f74\u6700\u5927\u523b\u5ea6\u662f\u5426\u9650\u5236\u4e3a1. Defaults to False.\n        math_text (bool, optional):\n            \u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f. Defaults to True.\n        one_decimal_place (bool, optional):\n            Y\u8f74\u523b\u5ea6\u662f\u5426\u53ea\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570. Defaults to False.\n        percentage (bool, optional):\n            \u662f\u5426\u5c06Y\u8f74\u663e\u793a\u4e3a\u767e\u5206\u6bd4\u683c\u5f0f. Defaults to False.\n\n    Raises:\n        ValueError: \u5f53data\u6570\u636e\u683c\u5f0f\u65e0\u6548\u65f6\u629b\u51fa\n        ValueError: \u5f53test_method\u4e0d\u662f\"external\"\u65f6\u629b\u51fa\uff08\u591a\u7ec4\u6570\u636e\u7edf\u8ba1\u6d4b\u8bd5\u65b9\u6cd5\u6682\u65f6\u4ec5\u652f\u6301external\u65b9\u6cd5\uff09\n\n    Returns:\n        Axes: \u8fd4\u56dematplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\n    \"\"\"\n\n    ax = ax or plt.gca()\n    group_labels = group_labels or [f\"Group {i + 1}\" for i in range(len(data))]\n    n_groups = len(data)\n\n    # \u628a\u6240\u6709\u5b50\u5217\u8868\u5c55\u5f00\u6210\u4e00\u4e2a\u5927\u5217\u8868\n    all_values = [x for sublist1 in data for sublist2 in sublist1 for x in sublist2]\n\n    x_positions_all = []\n    for index_group, group_data in enumerate(data):\n        n_bars = len(group_data)\n        if bar_labels is None:\n            bar_labels = [f\"Bar {i + 1}\" for i in range(n_bars)]\n        if bar_color is None:\n            bar_color = [\"gray\"] * n_bars\n\n        x_positions = (\n            np.arange(n_bars) * (bar_width + bar_gap)\n            + bar_width / 2\n            + index_group\n            - (n_bars * bar_width + (n_bars - 1) * bar_gap) / 2\n        )\n        x_positions_all.append(x_positions)\n\n        # \u8ba1\u7b97\u5747\u503c\u3001\u6807\u51c6\u5dee\u3001\u6807\u51c6\u8bef\n        means = [_compute_summary(group_data[i])[0] for i in range(n_bars)]\n        sds = [_compute_summary(group_data[i])[1] for i in range(n_bars)]\n        ses = [_compute_summary(group_data[i])[2] for i in range(n_bars)]\n        if errorbar_type == \"sd\":\n            error_values = sds\n        elif errorbar_type == \"se\":\n            error_values = ses\n        else:\n            raise ValueError(\"errorbar_type \u53ea\u80fd\u662f 'sd' \u6216\u8005 'se'\")\n        # \u7ed8\u5236\u67f1\u5b50\n        bars = ax.bar(\n            x_positions, means, width=bar_width, color=bar_color, alpha=1, edgecolor=\"k\"\n        )\n        ax.errorbar(\n            x_positions,\n            means,\n            error_values,\n            fmt=\"none\",\n            linewidth=1,\n            capsize=3,\n            color=\"black\",\n        )\n        # \u7ed8\u5236\u6563\u70b9\n        for index_bar, dot in enumerate(group_data):\n            # \u521b\u5efa\u968f\u673a\u6570\u751f\u6210\u5668\n            rng = np.random.default_rng(seed=42)\n            dot_x_pos = rng.normal(\n                x_positions[index_bar], scale=bar_width / 7, size=len(dot)\n            )\n            _add_scatter(ax, dot_x_pos, dot, dots_color, dots_size=dots_size)\n    if legend:\n        ax.legend(bars, bar_labels, bbox_to_anchor=legend_position)\n\n    # \u7f8e\u5316\n    ax.spines[[\"top\", \"right\"]].set_visible(False)\n    ax.set_title(\n        title_name,\n        fontsize=title_fontsize,\n        pad=title_pad,\n    )\n    # x\u8f74\n    ax.set_xlabel(x_label_name, fontsize=x_label_fontsize)\n    ax.set_xticks(np.arange(n_groups))\n    ax.set_xticklabels(\n        group_labels,\n        ha=x_label_ha,\n        rotation_mode=\"anchor\",\n        fontsize=x_tick_fontsize,\n        rotation=x_tick_rotation,\n    )\n    # y\u8f74\n    ax.tick_params(\n        axis=\"y\",\n        labelsize=y_tick_fontsize,\n        rotation=y_tick_rotation,\n    )\n    ax.set_ylabel(y_label_name, fontsize=y_label_fontsize)\n    _set_yaxis(\n        ax,\n        all_values,\n        y_lim,\n        ax_bottom_is_0,\n        y_max_tick_is_1,\n        math_text,\n        one_decimal_place,\n        percentage,\n    )\n\n    # \u6dfb\u52a0\u7edf\u8ba1\u663e\u8457\u6027\u6807\u8bb0\n    if statistic:\n        for index_group, group_data in enumerate(data):\n            x_positions = x_positions_all[index_group]\n            comparisons = []\n            idx = 0\n            for i in range(len(group_data)):\n                for j in range(i + 1, len(group_data)):\n                    if test_method == \"external\":\n                        if p_list is None:\n                            raise ValueError(\"p_list\u4e0d\u80fd\u4e3a\u7a7a\")\n                        p = p_list[index_group][idx]\n                        idx += 1\n                    else:\n                        raise ValueError(\"\u591a\u7ec4\u6570\u636e\u7edf\u8ba1\u6d4b\u8bd5\u65b9\u6cd5\u6682\u65f6\u4ec5\u652f\u6301 external\u65b9\u6cd5\")\n                    if p &lt;= 0.05:\n                        comparisons.append((x_positions[i], x_positions[j], p))\n            y_max = ax.get_ylim()[1]\n            interval = (y_max - np.max(all_values)) / (len(comparisons) + 1)\n            _annotate_significance(\n                ax,\n                comparisons,\n                np.max(all_values),\n                interval,\n                line_color=line_color,\n                star_offset=interval / 5,\n                fontsize=asterisk_fontsize,\n                color=asterisk_color,\n            )\n\n    return ax\n</code></pre>"},{"location":"api/#plotfig.correlation","title":"plotfig.correlation","text":""},{"location":"api/#plotfig.correlation.plot_correlation_figure","title":"plot_correlation_figure","text":"<pre><code>plot_correlation_figure(data1, data2, ax=None, stats_method='spearman', ci=False, dots_color='steelblue', dots_size=1, line_color='r', title_name='', title_fontsize=12, title_pad=10, x_label_name='', x_label_fontsize=10, x_tick_fontsize=10, x_tick_rotation=0, x_major_locator=None, x_max_tick_to_value=None, x_format='normal', y_label_name='', y_label_fontsize=10, y_tick_fontsize=10, y_tick_rotation=0, y_major_locator=None, y_max_tick_to_value=None, y_format='normal', asterisk_fontsize=10, show_p_value=False, hexbin=False, hexbin_cmap=None, hexbin_gridsize=50)\n</code></pre> <p>\u7ed8\u5236\u4e24\u4e2a\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u56fe\uff0c\u652f\u6301\u7ebf\u6027\u56de\u5f52\u3001\u7f6e\u4fe1\u533a\u95f4\u548c\u7edf\u8ba1\u65b9\u6cd5\uff08Spearman \u6216 Pearson\uff09\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>data1</code> <code>list[Num] | ndarray</code> <p>\u7b2c\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u5217\u8868\u6216\u6570\u7ec4\u3002</p> \u5fc5\u9700 <code>data2</code> <code>list[Num] | ndarray</code> <p>\u7b2c\u4e8c\u4e2a\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u5217\u8868\u6216\u6570\u7ec4\u3002</p> \u5fc5\u9700 <code>ax</code> <code>Axes | None</code> <p>matplotlib \u7684 Axes \u5bf9\u8c61\uff0c\u7528\u4e8e\u7ed8\u56fe\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u4f7f\u7528\u5f53\u524d Axes\u3002</p> <code>None</code> <code>stats_method</code> <code>str</code> <p>\u76f8\u5173\u6027\u7edf\u8ba1\u65b9\u6cd5\uff0c\u652f\u6301 \"spearman\" \u548c \"pearson\"\u3002\u9ed8\u8ba4\u4e3a \"spearman\"\u3002</p> <code>'spearman'</code> <code>ci</code> <code>bool</code> <p>\u662f\u5426\u7ed8\u5236\u7f6e\u4fe1\u533a\u95f4\u5e26\u3002\u9ed8\u8ba4\u4e3a False\u3002</p> <code>False</code> <code>dots_color</code> <code>str</code> <p>\u6563\u70b9\u7684\u989c\u8272\u3002\u9ed8\u8ba4\u4e3a \"steelblue\"\u3002</p> <code>'steelblue'</code> <code>dots_size</code> <code>int | float</code> <p>\u6563\u70b9\u7684\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 1\u3002</p> <code>1</code> <code>line_color</code> <code>str</code> <p>\u56de\u5f52\u7ebf\u7684\u989c\u8272\u3002\u9ed8\u8ba4\u4e3a \"r\"\uff08\u7ea2\u8272\uff09\u3002</p> <code>'r'</code> <code>title_name</code> <code>str</code> <p>\u56fe\u5f62\u6807\u9898\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</p> <code>''</code> <code>title_fontsize</code> <code>int</code> <p>\u6807\u9898\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002</p> <code>12</code> <code>title_pad</code> <code>int</code> <p>\u6807\u9898\u4e0e\u56fe\u5f62\u4e4b\u95f4\u7684\u95f4\u8ddd\u3002\u9ed8\u8ba4\u4e3a 10\u3002</p> <code>10</code> <code>x_label_name</code> <code>str</code> <p>X \u8f74\u6807\u7b7e\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</p> <code>''</code> <code>x_label_fontsize</code> <code>int</code> <p>X \u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002</p> <code>10</code> <code>x_tick_fontsize</code> <code>int</code> <p>X \u8f74\u523b\u5ea6\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002</p> <code>10</code> <code>x_tick_rotation</code> <code>int</code> <p>X \u8f74\u523b\u5ea6\u6807\u7b7e\u65cb\u8f6c\u89d2\u5ea6\u3002\u9ed8\u8ba4\u4e3a 0\u3002</p> <code>0</code> <code>x_major_locator</code> <code>float | None</code> <p>\u8bbe\u7f6e X \u8f74\u4e3b\u523b\u5ea6\u95f4\u9694\u3002\u9ed8\u8ba4\u4e3a None\u3002</p> <code>None</code> <code>x_max_tick_to_value</code> <code>float | None</code> <p>\u8bbe\u7f6e X \u8f74\u6700\u5927\u663e\u793a\u523b\u5ea6\u503c\u3002\u9ed8\u8ba4\u4e3a None\u3002</p> <code>None</code> <code>x_format</code> <code>str</code> <p>X \u8f74\u683c\u5f0f\u5316\u65b9\u5f0f\uff0c\u652f\u6301 \"normal\", \"sci\", \"1f\", \"percent\"\u3002\u9ed8\u8ba4\u4e3a \"normal\"\u3002</p> <code>'normal'</code> <code>y_label_name</code> <code>str</code> <p>Y \u8f74\u6807\u7b7e\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</p> <code>''</code> <code>y_label_fontsize</code> <code>int</code> <p>Y \u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002</p> <code>10</code> <code>y_tick_fontsize</code> <code>int</code> <p>Y \u8f74\u523b\u5ea6\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002</p> <code>10</code> <code>y_tick_rotation</code> <code>int</code> <p>Y \u8f74\u523b\u5ea6\u6807\u7b7e\u65cb\u8f6c\u89d2\u5ea6\u3002\u9ed8\u8ba4\u4e3a 0\u3002</p> <code>0</code> <code>y_major_locator</code> <code>float | None</code> <p>\u8bbe\u7f6e Y \u8f74\u4e3b\u523b\u5ea6\u95f4\u9694\u3002\u9ed8\u8ba4\u4e3a None\u3002</p> <code>None</code> <code>y_max_tick_to_value</code> <code>float | None</code> <p>\u8bbe\u7f6e Y \u8f74\u6700\u5927\u663e\u793a\u523b\u5ea6\u503c\u3002\u9ed8\u8ba4\u4e3a None\u3002</p> <code>None</code> <code>y_format</code> <code>str</code> <p>Y \u8f74\u683c\u5f0f\u5316\u65b9\u5f0f\uff0c\u652f\u6301 \"normal\", \"sci\", \"1f\", \"percent\"\u3002\u9ed8\u8ba4\u4e3a \"normal\"\u3002</p> <code>'normal'</code> <code>asterisk_fontsize</code> <code>int</code> <p>\u663e\u8457\u6027\u661f\u53f7\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002</p> <code>10</code> <code>show_p_value</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a p \u503c\u3002\u9ed8\u8ba4\u4e3a True\u3002</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>None</code> <p>None</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/correlation.py</code> <pre><code>def plot_correlation_figure(\n    data1: list[Num] | np.ndarray,\n    data2: list[Num] | np.ndarray,\n    ax: plt.Axes | None = None,\n    stats_method: str = \"spearman\",\n    ci: bool = False,\n    dots_color: str = \"steelblue\",\n    dots_size: int | float = 1,\n    line_color: str = \"r\",\n    title_name: str = \"\",\n    title_fontsize: int = 12,\n    title_pad: int = 10,\n    x_label_name: str = \"\",\n    x_label_fontsize: int = 10,\n    x_tick_fontsize: int = 10,\n    x_tick_rotation: int = 0,\n    x_major_locator: float | None = None,\n    x_max_tick_to_value: float | None = None,\n    x_format: str = \"normal\",  # \u652f\u6301 \"normal\", \"sci\", \"1f\", \"percent\"\n    y_label_name: str = \"\",\n    y_label_fontsize: int = 10,\n    y_tick_fontsize: int = 10,\n    y_tick_rotation: int = 0,\n    y_major_locator: float | None = None,\n    y_max_tick_to_value: float | None = None,\n    y_format: str = \"normal\",  # \u652f\u6301 \"normal\", \"sci\", \"1f\", \"percent\"\n    asterisk_fontsize: int = 10,\n    show_p_value: bool = False,\n    hexbin: bool = False,\n    hexbin_cmap: bool = None,\n    hexbin_gridsize: int = 50,\n) -&gt; None:\n    \"\"\"\n    \u7ed8\u5236\u4e24\u4e2a\u6570\u636e\u96c6\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u56fe\uff0c\u652f\u6301\u7ebf\u6027\u56de\u5f52\u3001\u7f6e\u4fe1\u533a\u95f4\u548c\u7edf\u8ba1\u65b9\u6cd5\uff08Spearman \u6216 Pearson\uff09\u3002\n\n    Args:\n        data1 (list[Num] | np.ndarray): \u7b2c\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u5217\u8868\u6216\u6570\u7ec4\u3002\n        data2 (list[Num] | np.ndarray): \u7b2c\u4e8c\u4e2a\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u5217\u8868\u6216\u6570\u7ec4\u3002\n        ax (plt.Axes | None, optional): matplotlib \u7684 Axes \u5bf9\u8c61\uff0c\u7528\u4e8e\u7ed8\u56fe\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u4f7f\u7528\u5f53\u524d Axes\u3002\n        stats_method (str, optional): \u76f8\u5173\u6027\u7edf\u8ba1\u65b9\u6cd5\uff0c\u652f\u6301 \"spearman\" \u548c \"pearson\"\u3002\u9ed8\u8ba4\u4e3a \"spearman\"\u3002\n        ci (bool, optional): \u662f\u5426\u7ed8\u5236\u7f6e\u4fe1\u533a\u95f4\u5e26\u3002\u9ed8\u8ba4\u4e3a False\u3002\n        dots_color (str, optional): \u6563\u70b9\u7684\u989c\u8272\u3002\u9ed8\u8ba4\u4e3a \"steelblue\"\u3002\n        dots_size (int | float, optional): \u6563\u70b9\u7684\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 1\u3002\n        line_color (str, optional): \u56de\u5f52\u7ebf\u7684\u989c\u8272\u3002\u9ed8\u8ba4\u4e3a \"r\"\uff08\u7ea2\u8272\uff09\u3002\n        title_name (str, optional): \u56fe\u5f62\u6807\u9898\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\n        title_fontsize (int, optional): \u6807\u9898\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002\n        title_pad (int, optional): \u6807\u9898\u4e0e\u56fe\u5f62\u4e4b\u95f4\u7684\u95f4\u8ddd\u3002\u9ed8\u8ba4\u4e3a 10\u3002\n        x_label_name (str, optional): X \u8f74\u6807\u7b7e\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\n        x_label_fontsize (int, optional): X \u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002\n        x_tick_fontsize (int, optional): X \u8f74\u523b\u5ea6\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002\n        x_tick_rotation (int, optional): X \u8f74\u523b\u5ea6\u6807\u7b7e\u65cb\u8f6c\u89d2\u5ea6\u3002\u9ed8\u8ba4\u4e3a 0\u3002\n        x_major_locator (float | None, optional): \u8bbe\u7f6e X \u8f74\u4e3b\u523b\u5ea6\u95f4\u9694\u3002\u9ed8\u8ba4\u4e3a None\u3002\n        x_max_tick_to_value (float | None, optional): \u8bbe\u7f6e X \u8f74\u6700\u5927\u663e\u793a\u523b\u5ea6\u503c\u3002\u9ed8\u8ba4\u4e3a None\u3002\n        x_format (str, optional): X \u8f74\u683c\u5f0f\u5316\u65b9\u5f0f\uff0c\u652f\u6301 \"normal\", \"sci\", \"1f\", \"percent\"\u3002\u9ed8\u8ba4\u4e3a \"normal\"\u3002\n        y_label_name (str, optional): Y \u8f74\u6807\u7b7e\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\n        y_label_fontsize (int, optional): Y \u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002\n        y_tick_fontsize (int, optional): Y \u8f74\u523b\u5ea6\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002\n        y_tick_rotation (int, optional): Y \u8f74\u523b\u5ea6\u6807\u7b7e\u65cb\u8f6c\u89d2\u5ea6\u3002\u9ed8\u8ba4\u4e3a 0\u3002\n        y_major_locator (float | None, optional): \u8bbe\u7f6e Y \u8f74\u4e3b\u523b\u5ea6\u95f4\u9694\u3002\u9ed8\u8ba4\u4e3a None\u3002\n        y_max_tick_to_value (float | None, optional): \u8bbe\u7f6e Y \u8f74\u6700\u5927\u663e\u793a\u523b\u5ea6\u503c\u3002\u9ed8\u8ba4\u4e3a None\u3002\n        y_format (str, optional): Y \u8f74\u683c\u5f0f\u5316\u65b9\u5f0f\uff0c\u652f\u6301 \"normal\", \"sci\", \"1f\", \"percent\"\u3002\u9ed8\u8ba4\u4e3a \"normal\"\u3002\n        asterisk_fontsize (int, optional): \u663e\u8457\u6027\u661f\u53f7\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a 10\u3002\n        show_p_value (bool, optional): \u662f\u5426\u663e\u793a p \u503c\u3002\u9ed8\u8ba4\u4e3a True\u3002\n\n    Returns:\n        None\n    \"\"\"\n\n    def set_axis(\n        ax, axis, label, labelsize, ticksize, rotation, locator, max_tick_value, fmt\n    ):\n        if axis == \"x\":\n            set_label = ax.set_xlabel\n            get_ticks = ax.get_xticks\n            set_ticks = ax.set_xticks\n            axis_formatter = ax.xaxis.set_major_formatter\n            axis_major_locator = ax.xaxis.set_major_locator\n        else:\n            set_label = ax.set_ylabel\n            get_ticks = ax.get_yticks\n            set_ticks = ax.set_yticks\n            axis_formatter = ax.yaxis.set_major_formatter\n            axis_major_locator = ax.yaxis.set_major_locator\n\n        set_label(label, fontsize=labelsize)\n        ax.tick_params(axis=axis, which=\"major\", labelsize=ticksize, rotation=rotation)\n        if locator is not None:\n            axis_major_locator(MultipleLocator(locator))\n        if max_tick_value is not None:\n            set_ticks([i for i in get_ticks() if i &lt;= max_tick_value])\n\n        if fmt == \"sci\":\n            formatter = ScalarFormatter(useMathText=True)\n            formatter.set_powerlimits((-2, 2))\n            axis_formatter(formatter)\n        elif fmt == \"1f\":\n            axis_formatter(FormatStrFormatter(\"%.1f\"))\n        elif fmt == \"percent\":\n            axis_formatter(FuncFormatter(lambda x, pos: f\"{x:.0%}\"))\n\n    if ax is None:\n        ax = plt.gca()\n\n    A = np.asarray(data1)\n    B = np.asarray(data2)\n\n    slope, intercept, r_value, p_value, _ = stats.linregress(A, B)\n    x_seq = np.linspace(A.min(), A.max(), 100)\n    y_pred = slope * x_seq + intercept\n\n    if hexbin:\n        if hexbin_cmap is None:\n            hexbin_cmap = LinearSegmentedColormap.from_list(\n                \"custom\", [\"#ffffff\", \"#4573a5\"]\n            )\n        hb = ax.hexbin(A, B, gridsize=hexbin_gridsize, cmap=hexbin_cmap)\n    else:\n        ax.scatter(A, B, c=dots_color, s=dots_size, alpha=0.8)\n    ax.plot(x_seq, y_pred, line_color, lw=1)\n\n    if ci:\n        n = len(A)\n        dof = n - 2\n        t_val = stats.t.ppf(0.975, dof)\n        x_mean = A.mean()\n        residuals = B - (slope * A + intercept)\n        s_err = np.sqrt(np.sum(residuals**2) / dof)\n        SSxx = np.sum((A - x_mean) ** 2)\n        conf_interval = t_val * s_err * np.sqrt(1 / n + (x_seq - x_mean) ** 2 / SSxx)\n        ax.fill_between(\n            x_seq,\n            y_pred - conf_interval,\n            y_pred + conf_interval,\n            color=\"salmon\",\n            alpha=0.3,\n        )\n\n    ax.spines[[\"top\", \"right\"]].set_visible(False)\n    ax.set_title(title_name, fontsize=title_fontsize, pad=title_pad)\n\n    set_axis(\n        ax,\n        \"x\",\n        x_label_name,\n        x_label_fontsize,\n        x_tick_fontsize,\n        x_tick_rotation,\n        x_major_locator,\n        x_max_tick_to_value,\n        x_format,\n    )\n    set_axis(\n        ax,\n        \"y\",\n        y_label_name,\n        y_label_fontsize,\n        y_tick_fontsize,\n        y_tick_rotation,\n        y_major_locator,\n        y_max_tick_to_value,\n        y_format,\n    )\n\n    # \u6807\u6ce8r\u503c\u6216rho\u503c\n    if stats_method == \"spearman\":\n        s, p = stats.spearmanr(A, B)\n        label = r\"$\\rho$\"\n    elif stats_method == \"pearson\":\n        s, p = stats.pearsonr(A, B)\n        label = \"r\"\n    else:\n        print(f\"\u6ca1\u6709\u7edf\u8ba1\u65b9\u6cd5 {stats_method}\uff0c\u8bf7\u68c0\u67e5\u62fc\u5199\u3002\u66f4\u6362\u4e3a\u9ed8\u8ba4\u7684 spearman \u65b9\u6cd5\u3002\")\n        s, p = stats.spearmanr(A, B)\n        label = r\"$\\rho$\"\n\n    if show_p_value:\n        asterisk = f\" p={p:.4f}\"\n    else:\n        asterisk = (\n            \" ***\" if p &lt; 0.001 else \" **\" if p &lt; 0.01 else \" *\" if p &lt; 0.05 else \"\"\n        )\n    x_start, x_end = ax.get_xlim()\n    y_start, y_end = ax.get_ylim()\n    ax.text(\n        x_start + (x_end - x_start) * 0.1,\n        y_start + (y_end - y_start) * 0.9,\n        f\"{label}={s:.3f}{asterisk}\",\n        va=\"center\",\n        fontsize=asterisk_fontsize,\n    )\n    if hexbin:\n        return hb\n    return ax\n</code></pre>"},{"location":"api/#plotfig.matrix","title":"plotfig.matrix","text":""},{"location":"api/#plotfig.matrix.plot_matrix_figure","title":"plot_matrix_figure","text":"<pre><code>plot_matrix_figure(data, ax=None, row_labels_name=None, col_labels_name=None, cmap='bwr', vmin=None, vmax=None, aspect='equal', colorbar=True, colorbar_label_name='', colorbar_pad=0.1, colorbar_label_fontsize=10, colorbar_tick_fontsize=10, colorbar_tick_rotation=0, row_labels_fontsize=10, col_labels_fontsize=10, x_rotation=60, title_name='', title_fontsize=15, title_pad=20, diag_border=False, **imshow_kwargs)\n</code></pre> <p>\u5c06\u77e9\u9635\u7ed8\u5236\u4e3a\u70ed\u56fe\uff0c\u53ef\u9009\u663e\u793a\u6807\u7b7e\u3001\u989c\u8272\u6761\u548c\u6807\u9898\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>data</code> <code>ndarray</code> <p>\u5f62\u72b6\u4e3a (N, M) \u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u7528\u4e8e\u663e\u793a\u77e9\u9635\u3002</p> \u5fc5\u9700 <code>ax</code> <code>Axes | None</code> <p>\u8981\u7ed8\u56fe\u7684 Matplotlib \u5750\u6807\u8f74\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74\u3002</p> <code>None</code> <code>row_labels_name</code> <code>Sequence[str] | None</code> <p>\u884c\u6807\u7b7e\u5217\u8868\u3002</p> <code>None</code> <code>col_labels_name</code> <code>Sequence[str] | None</code> <p>\u5217\u6807\u7b7e\u5217\u8868\u3002</p> <code>None</code> <code>cmap</code> <code>str</code> <p>\u77e9\u9635\u4f7f\u7528\u7684\u989c\u8272\u6620\u5c04\u3002</p> <code>'bwr'</code> <code>vmin</code> <code>Num | None</code> <p>\u989c\u8272\u7f29\u653e\u7684\u6700\u5c0f\u503c\uff0c\u9ed8\u8ba4\u4f7f\u7528 data.min()\u3002</p> <code>None</code> <code>vmax</code> <code>Num | None</code> <p>\u989c\u8272\u7f29\u653e\u7684\u6700\u5927\u503c\uff0c\u9ed8\u8ba4\u4f7f\u7528 data.max()\u3002</p> <code>None</code> <code>aspect</code> <code>str</code> <p>\u56fe\u50cf\u7684\u7eb5\u6a2a\u6bd4\uff0c\u901a\u5e38\u4e3a \"equal\" \u6216 \"auto\"\u3002</p> <code>'equal'</code> <code>colorbar</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a\u989c\u8272\u6761\u3002</p> <code>True</code> <code>colorbar_label_name</code> <code>str</code> <p>\u989c\u8272\u6761\u7684\u6807\u7b7e\u3002</p> <code>''</code> <code>colorbar_pad</code> <code>Num</code> <p>\u989c\u8272\u6761\u4e0e\u77e9\u9635\u4e4b\u95f4\u7684\u95f4\u8ddd\u3002</p> <code>0.1</code> <code>colorbar_label_fontsize</code> <code>Num</code> <p>\u989c\u8272\u6761\u6807\u7b7e\u7684\u5b57\u4f53\u5927\u5c0f\u3002</p> <code>10</code> <code>colorbar_tick_fontsize</code> <code>Num</code> <p>\u989c\u8272\u6761\u523b\u5ea6\u7684\u5b57\u4f53\u5927\u5c0f\u3002</p> <code>10</code> <code>colorbar_tick_rotation</code> <code>Num</code> <p>\u989c\u8272\u6761\u523b\u5ea6\u6807\u7b7e\u7684\u65cb\u8f6c\u89d2\u5ea6\u3002</p> <code>0</code> <code>row_labels_fontsize</code> <code>Num</code> <p>\u884c\u6807\u7b7e\u7684\u5b57\u4f53\u5927\u5c0f\u3002</p> <code>10</code> <code>col_labels_fontsize</code> <code>Num</code> <p>\u5217\u6807\u7b7e\u7684\u5b57\u4f53\u5927\u5c0f\u3002</p> <code>10</code> <code>x_rotation</code> <code>Num</code> <p>x \u8f74\uff08\u5217\uff09\u6807\u7b7e\u7684\u65cb\u8f6c\u89d2\u5ea6\u3002</p> <code>60</code> <code>title_name</code> <code>Num</code> <p>\u56fe\u8868\u6807\u9898\u3002</p> <code>''</code> <code>title_fontsize</code> <code>Num</code> <p>\u6807\u9898\u7684\u5b57\u4f53\u5927\u5c0f\u3002</p> <code>15</code> <code>title_pad</code> <code>Num</code> <p>\u6807\u9898\u4e0a\u65b9\u7684\u95f4\u8ddd\u3002</p> <code>20</code> <code>diag_border</code> <code>bool</code> <p>\u662f\u5426\u7ed8\u5236\u5bf9\u89d2\u7ebf\u5355\u5143\u683c\u8fb9\u6846\u3002</p> <code>False</code> <code>**imshow_kwargs</code> <code>Any</code> <p>\u4f20\u9012\u7ed9 <code>imshow()</code> \u7684\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u3002</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>AxesImage</code> <code>Axes</code> <p>\u7531 <code>imshow()</code> \u521b\u5efa\u7684\u56fe\u50cf\u5bf9\u8c61\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/matrix.py</code> <pre><code>def plot_matrix_figure(\n    data: np.ndarray,\n    ax: Axes | None = None,\n    row_labels_name: Sequence[str] | None = None,\n    col_labels_name: Sequence[str] | None = None,\n    cmap: str = \"bwr\",\n    vmin: Num | None = None,\n    vmax: Num | None = None,\n    aspect: str = \"equal\",\n    colorbar: bool = True,\n    colorbar_label_name: str = \"\",\n    colorbar_pad: Num = 0.1,\n    colorbar_label_fontsize: Num = 10,\n    colorbar_tick_fontsize: Num = 10,\n    colorbar_tick_rotation: Num = 0,\n    row_labels_fontsize: Num = 10,\n    col_labels_fontsize: Num = 10,\n    x_rotation: Num = 60,\n    title_name: str = \"\",\n    title_fontsize: Num = 15,\n    title_pad: Num = 20,\n    diag_border: bool = False,\n    **imshow_kwargs: Any,\n) -&gt; Axes:\n    \"\"\"\n    \u5c06\u77e9\u9635\u7ed8\u5236\u4e3a\u70ed\u56fe\uff0c\u53ef\u9009\u663e\u793a\u6807\u7b7e\u3001\u989c\u8272\u6761\u548c\u6807\u9898\u3002\n\n    Args:\n        data (np.ndarray): \u5f62\u72b6\u4e3a (N, M) \u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u7528\u4e8e\u663e\u793a\u77e9\u9635\u3002\n        ax (Axes | None): \u8981\u7ed8\u56fe\u7684 Matplotlib \u5750\u6807\u8f74\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74\u3002\n        row_labels_name (Sequence[str] | None): \u884c\u6807\u7b7e\u5217\u8868\u3002\n        col_labels_name (Sequence[str] | None): \u5217\u6807\u7b7e\u5217\u8868\u3002\n        cmap (str): \u77e9\u9635\u4f7f\u7528\u7684\u989c\u8272\u6620\u5c04\u3002\n        vmin (Num | None): \u989c\u8272\u7f29\u653e\u7684\u6700\u5c0f\u503c\uff0c\u9ed8\u8ba4\u4f7f\u7528 data.min()\u3002\n        vmax (Num | None): \u989c\u8272\u7f29\u653e\u7684\u6700\u5927\u503c\uff0c\u9ed8\u8ba4\u4f7f\u7528 data.max()\u3002\n        aspect (str): \u56fe\u50cf\u7684\u7eb5\u6a2a\u6bd4\uff0c\u901a\u5e38\u4e3a \"equal\" \u6216 \"auto\"\u3002\n        colorbar (bool): \u662f\u5426\u663e\u793a\u989c\u8272\u6761\u3002\n        colorbar_label_name (str): \u989c\u8272\u6761\u7684\u6807\u7b7e\u3002\n        colorbar_pad (Num): \u989c\u8272\u6761\u4e0e\u77e9\u9635\u4e4b\u95f4\u7684\u95f4\u8ddd\u3002\n        colorbar_label_fontsize (Num): \u989c\u8272\u6761\u6807\u7b7e\u7684\u5b57\u4f53\u5927\u5c0f\u3002\n        colorbar_tick_fontsize (Num): \u989c\u8272\u6761\u523b\u5ea6\u7684\u5b57\u4f53\u5927\u5c0f\u3002\n        colorbar_tick_rotation (Num): \u989c\u8272\u6761\u523b\u5ea6\u6807\u7b7e\u7684\u65cb\u8f6c\u89d2\u5ea6\u3002\n        row_labels_fontsize (Num): \u884c\u6807\u7b7e\u7684\u5b57\u4f53\u5927\u5c0f\u3002\n        col_labels_fontsize (Num): \u5217\u6807\u7b7e\u7684\u5b57\u4f53\u5927\u5c0f\u3002\n        x_rotation (Num): x \u8f74\uff08\u5217\uff09\u6807\u7b7e\u7684\u65cb\u8f6c\u89d2\u5ea6\u3002\n        title_name (Num): \u56fe\u8868\u6807\u9898\u3002\n        title_fontsize (Num): \u6807\u9898\u7684\u5b57\u4f53\u5927\u5c0f\u3002\n        title_pad (Num): \u6807\u9898\u4e0a\u65b9\u7684\u95f4\u8ddd\u3002\n        diag_border (bool): \u662f\u5426\u7ed8\u5236\u5bf9\u89d2\u7ebf\u5355\u5143\u683c\u8fb9\u6846\u3002\n        **imshow_kwargs (Any): \u4f20\u9012\u7ed9 `imshow()` \u7684\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u3002\n\n    Returns:\n        AxesImage: \u7531 `imshow()` \u521b\u5efa\u7684\u56fe\u50cf\u5bf9\u8c61\u3002\n    \"\"\"\n\n    ax = ax or plt.gca()\n    vmin = vmin if vmin is not None else np.min(data)\n    vmax = vmax if vmax is not None else np.max(data)\n\n    im = ax.imshow(\n        data, cmap=cmap, vmin=vmin, vmax=vmax, aspect=aspect, **imshow_kwargs\n    )\n    ax.set_title(title_name, fontsize=title_fontsize, pad=title_pad)\n    if diag_border:\n        for i in range(data.shape[0]):\n            ax.add_patch(\n                plt.Rectangle(\n                    (i - 0.5, i - 0.5), 1, 1, fill=False, edgecolor=\"black\", lw=0.5\n                )\n            )\n\n    if col_labels_name is not None:\n        ax.set_xticks(np.arange(data.shape[1]))\n        ax.set_xticklabels(\n            col_labels_name,\n            fontsize=col_labels_fontsize,\n            rotation=x_rotation,\n            ha=\"right\",\n            rotation_mode=\"anchor\",\n        )\n\n    if row_labels_name is not None:\n        ax.set_yticks(np.arange(data.shape[0]))\n        ax.set_yticklabels(row_labels_name, fontsize=row_labels_fontsize)\n\n    if colorbar:\n        divider = make_axes_locatable(ax)\n        cax = divider.append_axes(\"right\", size=\"5%\", pad=colorbar_pad)\n        cbar = ax.figure.colorbar(im, cax=cax)\n        cbar.ax.set_ylabel(\n            colorbar_label_name,\n            rotation=-90,\n            va=\"bottom\",\n            fontsize=colorbar_label_fontsize,\n        )\n        cbar.ax.tick_params(\n            labelsize=colorbar_tick_fontsize, rotation=colorbar_tick_rotation\n        )\n        # Match colorbar height to the main plot\n        ax_pos = ax.get_position()\n        cax.set_position(\n            [cax.get_position().x0, ax_pos.y0, cax.get_position().width, ax_pos.height]\n        )\n\n    return ax\n</code></pre>"},{"location":"api/#plotfig.brain_surface","title":"plotfig.brain_surface","text":""},{"location":"api/#plotfig.brain_surface.plot_brain_surface_figure","title":"plot_brain_surface_figure","text":"<pre><code>plot_brain_surface_figure(data, species='human', atlas='glasser', surf='veryinflated', ax=None, vmin=None, vmax=None, cmap='Reds', colorbar=True, colorbar_location='right', colorbar_label_name='', colorbar_label_rotation=0, colorbar_decimals=1, colorbar_fontsize=8, colorbar_nticks=2, colorbar_shrink=0.15, colorbar_aspect=8, colorbar_draw_border=False, title_name='', title_fontsize=12, as_outline=False)\n</code></pre> <p>\u5728\u5927\u8111\u76ae\u5c42\u8868\u9762\u7ed8\u5236\u6570\u503c\u6570\u636e\u7684\u51fd\u6570\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>data</code> <code>dict[str, float]</code> <p>\u5305\u542b\u8111\u533a\u540d\u79f0\u548c\u5bf9\u5e94\u6570\u503c\u7684\u5b57\u5178\uff0c\u952e\u4e3a\u8111\u533a\u540d\u79f0\uff08\u5982\"lh_bankssts\"\uff09\uff0c\u503c\u4e3a\u6570\u503c</p> \u5fc5\u9700 <code>species</code> <code>str</code> <p>\u7269\u79cd\u540d\u79f0\uff0c\u652f\u6301\"human\"\u3001\"chimpanzee\"\u3001\"macaque\". Defaults to \"human\".</p> <code>'human'</code> <code>atlas</code> <code>str</code> <p>\u8111\u56fe\u96c6\u540d\u79f0\uff0c\u6839\u636e\u7269\u79cd\u4e0d\u540c\u53ef\u9009\u4e0d\u540c\u56fe\u96c6\u3002\u4eba\u4e0a\u5305\u62ec\"glasser\"\u3001\"bna\"\uff0c\u9ed1\u7329\u7329\u4e0a\u5305\u62ec\"bna\"\uff0c\u7315\u7334\u4e0a\u5305\u62ec\"charm5\"\u3001\"charm6\"\u3001\"bna\"\u4ee5\u53ca\"d99\". Defaults to \"glasser\".</p> <code>'glasser'</code> <code>surf</code> <code>str</code> <p>\u5927\u8111\u76ae\u5c42\u8868\u9762\u7c7b\u578b\uff0c\u5982\"inflated\"\u3001\"veryinflated\"\u3001\"midthickness\"\u7b49. Defaults to \"veryinflated\".</p> <code>'veryinflated'</code> <code>ax</code> <code>Axes | None</code> <p>matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.</p> <code>None</code> <code>vmin</code> <code>Num | None</code> <p>\u989c\u8272\u6620\u5c04\u7684\u6700\u5c0f\u503c\uff0cNone\u8868\u793a\u4f7f\u7528\u6570\u636e\u4e2d\u7684\u6700\u5c0f\u503c. Defaults to None.</p> <code>None</code> <code>vmax</code> <code>Num | None</code> <p>\u989c\u8272\u6620\u5c04\u7684\u6700\u5927\u503c\uff0cNone\u8868\u793a\u4f7f\u7528\u6570\u636e\u4e2d\u7684\u6700\u5927\u503c. Defaults to None.</p> <code>None</code> <code>cmap</code> <code>str</code> <p>\u989c\u8272\u6620\u5c04\u65b9\u6848\uff0c\u5982\"Reds\"\u3001\"Blues\"\u3001\"viridis\"\u7b49. Defaults to \"Reds\".</p> <code>'Reds'</code> <code>colorbar</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a\u989c\u8272\u6761. Defaults to True.</p> <code>True</code> <code>colorbar_location</code> <code>str</code> <p>\u989c\u8272\u6761\u4f4d\u7f6e\uff0c\u53ef\u9009\"left\"\u3001\"right\"\u3001\"top\"\u3001\"bottom\". Defaults to \"right\".</p> <code>'right'</code> <code>colorbar_label_name</code> <code>str</code> <p>\u989c\u8272\u6761\u6807\u7b7e\u540d\u79f0. Defaults to \"\".</p> <code>''</code> <code>colorbar_label_rotation</code> <code>int</code> <p>\u989c\u8272\u6761\u6807\u7b7e\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.</p> <code>0</code> <code>colorbar_decimals</code> <code>int</code> <p>\u989c\u8272\u6761\u523b\u5ea6\u6807\u7b7e\u7684\u5c0f\u6570\u4f4d\u6570. Defaults to 1.</p> <code>1</code> <code>colorbar_fontsize</code> <code>int</code> <p>\u989c\u8272\u6761\u5b57\u4f53\u5927\u5c0f. Defaults to 8.</p> <code>8</code> <code>colorbar_nticks</code> <code>int</code> <p>\u989c\u8272\u6761\u523b\u5ea6\u6570\u91cf. Defaults to 2.</p> <code>2</code> <code>colorbar_shrink</code> <code>float</code> <p>\u989c\u8272\u6761\u6536\u7f29\u6bd4\u4f8b. Defaults to 0.15.</p> <code>0.15</code> <code>colorbar_aspect</code> <code>int</code> <p>\u989c\u8272\u6761\u5bbd\u9ad8\u6bd4. Defaults to 8.</p> <code>8</code> <code>colorbar_draw_border</code> <code>bool</code> <p>\u662f\u5426\u7ed8\u5236\u989c\u8272\u6761\u8fb9\u6846. Defaults to False.</p> <code>False</code> <code>title_name</code> <code>str</code> <p>\u56fe\u5f62\u6807\u9898. Defaults to \"\".</p> <code>''</code> <code>title_fontsize</code> <code>int</code> <p>\u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.</p> <code>12</code> <code>as_outline</code> <code>bool</code> <p>\u662f\u5426\u4ee5\u8f6e\u5ed3\u7ebf\u5f62\u5f0f\u663e\u793a. Defaults to False.</p> <code>False</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5f53\u6307\u5b9a\u7684\u7269\u79cd\u4e0d\u652f\u6301\u65f6\u629b\u51fa</p> <code>ValueError</code> <p>\u5f53\u6307\u5b9a\u7684\u56fe\u96c6\u4e0d\u652f\u6301\u65f6\u629b\u51fa</p> <code>ValueError</code> <p>\u5f53\u6570\u636e\u4e3a\u7a7a\u65f6\u629b\u51fa</p> <code>ValueError</code> <p>\u5f53vmin\u5927\u4e8evmax\u65f6\u629b\u51fa</p> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>Axes</code> <code>Axes</code> <p>\u5305\u542b\u7ed8\u5236\u56fe\u50cf\u7684matplotlib\u5750\u6807\u8f74\u5bf9\u8c61</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/brain_surface.py</code> <pre><code>def plot_brain_surface_figure(\n    data: Mapping[str, Num],\n    species: str = \"human\",\n    atlas: str = \"glasser\",\n    surf: str = \"veryinflated\",\n    ax: Axes | None = None,\n    vmin: Num | None = None,\n    vmax: Num | None = None,\n    cmap: str = \"Reds\",\n    colorbar: bool = True,\n    colorbar_location: str = \"right\",\n    colorbar_label_name: str = \"\",\n    colorbar_label_rotation: int = 0,\n    colorbar_decimals: int = 1,\n    colorbar_fontsize: int = 8,\n    colorbar_nticks: int = 2,\n    colorbar_shrink: float = 0.15,\n    colorbar_aspect: int = 8,\n    colorbar_draw_border: bool = False,\n    title_name: str = \"\",\n    title_fontsize: int = 12,\n    as_outline: bool = False,\n) -&gt; Axes: \n    \"\"\"\u5728\u5927\u8111\u76ae\u5c42\u8868\u9762\u7ed8\u5236\u6570\u503c\u6570\u636e\u7684\u51fd\u6570\u3002\n\n    Args:\n        data (dict[str, float]): \u5305\u542b\u8111\u533a\u540d\u79f0\u548c\u5bf9\u5e94\u6570\u503c\u7684\u5b57\u5178\uff0c\u952e\u4e3a\u8111\u533a\u540d\u79f0\uff08\u5982\"lh_bankssts\"\uff09\uff0c\u503c\u4e3a\u6570\u503c\n        species (str, optional): \u7269\u79cd\u540d\u79f0\uff0c\u652f\u6301\"human\"\u3001\"chimpanzee\"\u3001\"macaque\". Defaults to \"human\".\n        atlas (str, optional): \u8111\u56fe\u96c6\u540d\u79f0\uff0c\u6839\u636e\u7269\u79cd\u4e0d\u540c\u53ef\u9009\u4e0d\u540c\u56fe\u96c6\u3002\u4eba\u4e0a\u5305\u62ec\"glasser\"\u3001\"bna\"\uff0c\u9ed1\u7329\u7329\u4e0a\u5305\u62ec\"bna\"\uff0c\u7315\u7334\u4e0a\u5305\u62ec\"charm5\"\u3001\"charm6\"\u3001\"bna\"\u4ee5\u53ca\"d99\". Defaults to \"glasser\".\n        surf (str, optional): \u5927\u8111\u76ae\u5c42\u8868\u9762\u7c7b\u578b\uff0c\u5982\"inflated\"\u3001\"veryinflated\"\u3001\"midthickness\"\u7b49. Defaults to \"veryinflated\".\n        ax (Axes | None, optional): matplotlib\u7684\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u4e3aNone\u5219\u4f7f\u7528\u5f53\u524d\u5750\u6807\u8f74. Defaults to None.\n        vmin (Num | None, optional): \u989c\u8272\u6620\u5c04\u7684\u6700\u5c0f\u503c\uff0cNone\u8868\u793a\u4f7f\u7528\u6570\u636e\u4e2d\u7684\u6700\u5c0f\u503c. Defaults to None.\n        vmax (Num | None, optional): \u989c\u8272\u6620\u5c04\u7684\u6700\u5927\u503c\uff0cNone\u8868\u793a\u4f7f\u7528\u6570\u636e\u4e2d\u7684\u6700\u5927\u503c. Defaults to None.\n        cmap (str, optional): \u989c\u8272\u6620\u5c04\u65b9\u6848\uff0c\u5982\"Reds\"\u3001\"Blues\"\u3001\"viridis\"\u7b49. Defaults to \"Reds\".\n        colorbar (bool, optional): \u662f\u5426\u663e\u793a\u989c\u8272\u6761. Defaults to True.\n        colorbar_location (str, optional): \u989c\u8272\u6761\u4f4d\u7f6e\uff0c\u53ef\u9009\"left\"\u3001\"right\"\u3001\"top\"\u3001\"bottom\". Defaults to \"right\".\n        colorbar_label_name (str, optional): \u989c\u8272\u6761\u6807\u7b7e\u540d\u79f0. Defaults to \"\".\n        colorbar_label_rotation (int, optional): \u989c\u8272\u6761\u6807\u7b7e\u65cb\u8f6c\u89d2\u5ea6. Defaults to 0.\n        colorbar_decimals (int, optional): \u989c\u8272\u6761\u523b\u5ea6\u6807\u7b7e\u7684\u5c0f\u6570\u4f4d\u6570. Defaults to 1.\n        colorbar_fontsize (int, optional): \u989c\u8272\u6761\u5b57\u4f53\u5927\u5c0f. Defaults to 8.\n        colorbar_nticks (int, optional): \u989c\u8272\u6761\u523b\u5ea6\u6570\u91cf. Defaults to 2.\n        colorbar_shrink (float, optional): \u989c\u8272\u6761\u6536\u7f29\u6bd4\u4f8b. Defaults to 0.15.\n        colorbar_aspect (int, optional): \u989c\u8272\u6761\u5bbd\u9ad8\u6bd4. Defaults to 8.\n        colorbar_draw_border (bool, optional): \u662f\u5426\u7ed8\u5236\u989c\u8272\u6761\u8fb9\u6846. Defaults to False.\n        title_name (str, optional): \u56fe\u5f62\u6807\u9898. Defaults to \"\".\n        title_fontsize (int, optional): \u6807\u9898\u5b57\u4f53\u5927\u5c0f. Defaults to 12.\n        as_outline (bool, optional): \u662f\u5426\u4ee5\u8f6e\u5ed3\u7ebf\u5f62\u5f0f\u663e\u793a. Defaults to False.\n\n    Raises:\n        ValueError: \u5f53\u6307\u5b9a\u7684\u7269\u79cd\u4e0d\u652f\u6301\u65f6\u629b\u51fa\n        ValueError: \u5f53\u6307\u5b9a\u7684\u56fe\u96c6\u4e0d\u652f\u6301\u65f6\u629b\u51fa\n        ValueError: \u5f53\u6570\u636e\u4e3a\u7a7a\u65f6\u629b\u51fa\n        ValueError: \u5f53vmin\u5927\u4e8evmax\u65f6\u629b\u51fa\n\n    Returns:\n        Axes: \u5305\u542b\u7ed8\u5236\u56fe\u50cf\u7684matplotlib\u5750\u6807\u8f74\u5bf9\u8c61\n    \"\"\"\n    # \u83b7\u53d6\u6216\u521b\u5efa\u5750\u6807\u8f74\u5bf9\u8c61\n    ax = ax or plt.gca()\n\n    # \u63d0\u53d6\u6240\u6709\u6570\u503c\u7528\u4e8e\u786e\u5b9avmin\u548cvmax\n    values = list(data.values())\n    if not values:\n        raise ValueError(\"data \u4e0d\u80fd\u4e3a\u7a7a\")\n    vmin = min(values) if vmin is None else vmin\n    vmax = max(values) if vmax is None else vmax\n    if vmin == vmax:\n        vmin, vmax = min(0, vmin), max(0, vmax)\n    if vmin &gt; vmax:\n        raise ValueError(\"vmin\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8evmax\")\n\n    # \u8bbe\u7f6e\u6570\u636e\u6587\u4ef6\u8def\u5f84\n    # \u5b9a\u4e49\u4e0d\u540c\u7269\u79cd\u3001\u8868\u9762\u7c7b\u578b\u548c\u56fe\u96c6\u7684\u6587\u4ef6\u8def\u5f84\u4fe1\u606f\n    atlas_info = {\n        \"human\": {\n            \"surf\": {\n                \"lh\": f\"surfaces/human_fsLR/tpl-fsLR_den-32k_hemi-L_{surf}.surf.gii\",\n                \"rh\": f\"surfaces/human_fsLR/tpl-fsLR_den-32k_hemi-R_{surf}.surf.gii\",\n            },\n            \"atlas\": {\n                \"glasser\": {\n                    \"lh\": \"atlases/human_Glasser/fsaverage.L.Glasser.32k_fs_LR.label.gii\",\n                    \"rh\": \"atlases/human_Glasser/fsaverage.R.Glasser.32k_fs_LR.label.gii\",\n                },\n                \"bna\": {\n                    \"lh\": \"atlases/human_BNA/fsaverage.L.BNA.32k_fs_LR.label.gii\",\n                    \"rh\": \"atlases/human_BNA/fsaverage.R.BNA.32k_fs_LR.label.gii\",\n                },\n            },\n        },\n        \"chimpanzee\": {\n            \"surf\": {\n                \"lh\": f\"surfaces/chimpanzee_BNA/ChimpYerkes29_v1.2.L.{surf}.32k_fs_LR.surf.gii\",\n                \"rh\": f\"surfaces/chimpanzee_BNA/ChimpYerkes29_v1.2.R.{surf}.32k_fs_LR.surf.gii\",\n            },\n            \"atlas\": {\n                \"bna\": {\n                    \"lh\": \"atlases/chimpanzee_BNA/ChimpBNA.L.32k_fs_LR.label.gii\",\n                    \"rh\": \"atlases/chimpanzee_BNA/ChimpBNA.R.32k_fs_LR.label.gii\",\n                },\n            }\n        },\n        \"macaque\": {\n            \"surf\": {\n                \"lh\": f\"surfaces/macaque_BNA/civm.L.{surf}.32k_fs_LR.surf.gii\",\n                \"rh\": f\"surfaces/macaque_BNA/civm.R.{surf}.32k_fs_LR.surf.gii\",\n            },\n            \"atlas\": {\n                \"charm5\": {\n                    \"lh\": \"atlases/macaque_CHARM5/L.charm5.label.gii\",\n                    \"rh\": \"atlases/macaque_CHARM5/R.charm5.label.gii\",\n                },\n                \"charm6\": {\n                    \"lh\": \"atlases/macaque_CHARM6/L.charm6.label.gii\",\n                    \"rh\": \"atlases/macaque_CHARM6/R.charm6.label.gii\",\n                },\n                \"bna\": {\n                    \"lh\": \"atlases/macaque_BNA/MBNA_124_32k_L.label.gii\",\n                    \"rh\": \"atlases/macaque_BNA/MBNA_124_32k_R.label.gii\",\n                },\n                \"d99\": {\n                    \"lh\": \"atlases/macaque_D99/L.d99.label.gii\",\n                    \"rh\": \"atlases/macaque_D99/R.d99.label.gii\",\n                },\n            }\n        }\n    }\n\n    # \u68c0\u67e5\u7269\u79cd\u662f\u5426\u652f\u6301\n    if species not in atlas_info:\n        raise ValueError(f\"Unsupported species: {species}. Supported species are: {list(atlas_info.keys())}\")\n    else:\n        # \u68c0\u67e5\u6307\u5b9a\u7269\u79cd\u7684\u56fe\u96c6\u662f\u5426\u652f\u6301\n        if atlas not in atlas_info[species][\"atlas\"]:\n            raise ValueError(f\"Unsupported {atlas} atlas for {species}\")\n\n    # \u521b\u5efaPlot\u5bf9\u8c61\uff0c\u7528\u4e8e\u7ed8\u5236\u5927\u8111\u76ae\u5c42\n    p = Plot(\n        NEURODATA / atlas_info[species][\"surf\"][\"lh\"],\n        NEURODATA / atlas_info[species][\"surf\"][\"rh\"],\n    )\n\n    # \u5206\u79bb\u5de6\u534a\u7403\u548c\u53f3\u534a\u7403\u7684\u6570\u636e\n    hemisphere_data = {}\n    for hemi in [\"lh\", \"rh\"]:\n        hemi_data = {k: v for k, v in data.items() if k.startswith(f\"{hemi}_\")}\n        hemi_parc = _map_labels_to_values(\n            hemi_data, NEURODATA / atlas_info[species][\"atlas\"][atlas][hemi]\n        )\n        hemisphere_data[hemi] = hemi_parc\n\n    # \u753b\u56fe\n    # colorbar\u53c2\u6570\u8bbe\u7f6e\uff08\u7528\u5217\u8868\u7edf\u4e00\u7ba1\u7406\uff0c\u4fbf\u4e8e\u7ef4\u62a4\uff09\n    colorbar_params = [\n        (\"location\", colorbar_location),\n        (\"label_direction\", colorbar_label_rotation),\n        (\"decimals\", colorbar_decimals),\n        (\"fontsize\", colorbar_fontsize),\n        (\"n_ticks\", colorbar_nticks),\n        (\"shrink\", colorbar_shrink),\n        (\"aspect\", colorbar_aspect),\n        (\"draw_border\", colorbar_draw_border),\n    ]\n    colorbar_kws = {k: v for k, v in colorbar_params}\n    # \u6dfb\u52a0\u56fe\u5c42\u5230\u7ed8\u56fe\u5bf9\u8c61\n    p.add_layer(\n        {\"left\": hemisphere_data[\"lh\"], \"right\": hemisphere_data[\"rh\"]},\n        cbar=colorbar,\n        cmap=cmap,\n        color_range=(vmin, vmax),\n        cbar_label=colorbar_label_name,\n        zero_transparent=False,\n        as_outline=as_outline,\n    )\n    # \u6784\u5efa\u5750\u6807\u8f74\u5e76\u5e94\u7528\u989c\u8272\u6761\u8bbe\u7f6e\n    ax = p.build_axis(ax=ax, cbar_kws=colorbar_kws)\n    # \u8bbe\u7f6e\u56fe\u5f62\u6807\u9898\n    ax.set_title(title_name, fontsize=title_fontsize)\n\n    return ax\n</code></pre>"},{"location":"api/#plotfig.circos","title":"plotfig.circos","text":""},{"location":"api/#plotfig.circos.plot_circos_figure","title":"plot_circos_figure","text":"<pre><code>plot_circos_figure(connectome, ax=None, symmetric=True, node_names=None, node_colors=None, node_space=0.0, node_label_fontsize=10, vmin=None, vmax=None, cmap=None, edge_color='red', edge_alpha=1.0, colorbar=True, colorbar_orientation='vertical', colorbar_label='')\n</code></pre> <p>\u7ed8\u5236\u8111\u8fde\u63a5\u7ec4\u7684\u73af\u5f62\u56fe\uff08Circos plot\uff09\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>connectome</code> <code>NDArray</code> <p>\u8111\u8fde\u63a5\u77e9\u9635\uff0c\u5fc5\u987b\u4e3a\u5bf9\u79f0\u65b9\u9635\u3002\u5f62\u72b6\u4e3a(n, n)\uff0c\u5176\u4e2dn\u4e3a\u8111\u533a\u6570\u91cf</p> \u5fc5\u9700 <code>ax</code> <code>Axes | None</code> <p>matplotlib\u7684\u6781\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u63d0\u4f9b\u5219\u5728\u6b64\u8f74\u4e0a\u7ed8\u56fe\u3002\u9ed8\u8ba4\u4e3aNone</p> <code>None</code> <code>symmetric</code> <code>bool</code> <p>\u662f\u5426\u4e3a\u5bf9\u79f0\u5e03\u5c40\uff08\u7528\u4e8e\u5de6\u53f3\u8111\u534a\u7403\u6570\u636e\uff09\u3002\u9ed8\u8ba4\u4e3aTrue</p> <code>True</code> <code>node_names</code> <code>list[str] | None</code> <p>\u8111\u533a\u540d\u79f0\u5217\u8868\uff0c\u957f\u5ea6\u5e94\u4e0econnectome\u7684\u7ef4\u5ea6\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u81ea\u52a8\u751f\u6210\"Node_1\", \"Node_2\"...\u683c\u5f0f\u7684\u540d\u79f0</p> <code>None</code> <code>node_colors</code> <code>list[str] | None</code> <p>\u8111\u533a\u989c\u8272\u5217\u8868\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u81ea\u52a8\u751f\u6210\u989c\u8272</p> <code>None</code> <code>node_space</code> <code>float</code> <p>\u8111\u533a\u95f4\u95f4\u9694\u89d2\u5ea6\uff08\u5ea6\uff09\u3002\u9ed8\u8ba4\u4e3a0.0</p> <code>0.0</code> <code>node_label_fontsize</code> <code>int</code> <p>\u8111\u533a\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a10</p> <code>10</code> <code>vmin</code> <code>float | None</code> <p>\u8fde\u63a5\u5f3a\u5ea6\u989c\u8272\u6620\u5c04\u7684\u6700\u5c0f\u503c\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u6839\u636e\u6570\u636e\u81ea\u52a8\u786e\u5b9a</p> <code>None</code> <code>vmax</code> <code>float | None</code> <p>\u8fde\u63a5\u5f3a\u5ea6\u989c\u8272\u6620\u5c04\u7684\u6700\u5927\u503c\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u6839\u636e\u6570\u636e\u81ea\u52a8\u786e\u5b9a</p> <code>None</code> <code>cmap</code> <code>str | None</code> <p>\u989c\u8272\u6620\u5c04\u8868\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u6839\u636eedge_color\u751f\u6210</p> <code>None</code> <code>edge_color</code> <code>str</code> <p>\u8fde\u7ebf\u989c\u8272\uff0c\u5f53cmap\u4e3aNone\u65f6\u4f7f\u7528\u6b64\u989c\u8272\u751f\u6210\u989c\u8272\u6620\u5c04\u3002\u9ed8\u8ba4\u4e3a\"red\"</p> <code>'red'</code> <code>edge_alpha</code> <code>float</code> <p>\u8fde\u7ebf\u900f\u660e\u5ea6\uff0c\u8303\u56f40-1\u3002\u9ed8\u8ba4\u4e3a1.0\uff08\u4e0d\u900f\u660e\uff09</p> <code>1.0</code> <code>colorbar</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a\u989c\u8272\u6761\u3002\u9ed8\u8ba4\u4e3aTrue</p> <code>True</code> <code>colorbar_orientation</code> <code>Literal['vertical', 'horizontal']</code> <p>\u989c\u8272\u6761\u65b9\u5411\u3002\u9ed8\u8ba4\u4e3a\"vertical\"</p> <code>'vertical'</code> <code>colorbar_label</code> <code>str</code> <p>\u989c\u8272\u6761\u6807\u7b7e\u6587\u672c\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32</p> <code>''</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5f53connectome\u4e0d\u662f\u5bf9\u79f0\u77e9\u9635\u65f6\u629b\u51fa</p> <code>ValueError</code> <p>\u5f53vmin\u5927\u4e8evmax\u65f6\u629b\u51fa</p> <code>TypeError</code> <p>\u5f53\u63d0\u4f9b\u7684ax\u4e0d\u662fPolarAxes\u7c7b\u578b\u65f6\u629b\u51fa</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Figure | PolarAxes</code> <p>Figure | Axes: \u5982\u679cax\u4e3aNone\u5219\u8fd4\u56deFigure\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56deAxes\u5bf9\u8c61</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/circos.py</code> <pre><code>def plot_circos_figure(\n    connectome: NDArray,\n    ax: Axes | None = None,\n    symmetric: bool = True,\n    node_names: list[str] | None = None,\n    node_colors: list[str] | None = None,\n    node_space: float = 0.0,\n    node_label_fontsize: int = 10,\n    vmin: float | None = None,\n    vmax: float | None = None,\n    cmap: str | None = None,\n    edge_color: str = \"red\",\n    edge_alpha: float = 1.0,\n    colorbar: bool = True,\n    colorbar_orientation: Literal[\"vertical\", \"horizontal\"] = \"vertical\",\n    colorbar_label: str = \"\",\n) -&gt; Figure | PolarAxes:\n    \"\"\"\u7ed8\u5236\u8111\u8fde\u63a5\u7ec4\u7684\u73af\u5f62\u56fe\uff08Circos plot\uff09\u3002\n\n    Args:\n        connectome (NDArray): \u8111\u8fde\u63a5\u77e9\u9635\uff0c\u5fc5\u987b\u4e3a\u5bf9\u79f0\u65b9\u9635\u3002\u5f62\u72b6\u4e3a(n, n)\uff0c\u5176\u4e2dn\u4e3a\u8111\u533a\u6570\u91cf\n        ax (Axes | None, optional): matplotlib\u7684\u6781\u5750\u6807\u8f74\u5bf9\u8c61\uff0c\u5982\u679c\u63d0\u4f9b\u5219\u5728\u6b64\u8f74\u4e0a\u7ed8\u56fe\u3002\u9ed8\u8ba4\u4e3aNone\n        symmetric (bool, optional): \u662f\u5426\u4e3a\u5bf9\u79f0\u5e03\u5c40\uff08\u7528\u4e8e\u5de6\u53f3\u8111\u534a\u7403\u6570\u636e\uff09\u3002\u9ed8\u8ba4\u4e3aTrue\n        node_names (list[str] | None, optional): \u8111\u533a\u540d\u79f0\u5217\u8868\uff0c\u957f\u5ea6\u5e94\u4e0econnectome\u7684\u7ef4\u5ea6\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u81ea\u52a8\u751f\u6210\"Node_1\", \"Node_2\"...\u683c\u5f0f\u7684\u540d\u79f0\n        node_colors (list[str] | None, optional): \u8111\u533a\u989c\u8272\u5217\u8868\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u81ea\u52a8\u751f\u6210\u989c\u8272\n        node_space (float, optional): \u8111\u533a\u95f4\u95f4\u9694\u89d2\u5ea6\uff08\u5ea6\uff09\u3002\u9ed8\u8ba4\u4e3a0.0\n        node_label_fontsize (int, optional): \u8111\u533a\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a10\n        vmin (float | None, optional): \u8fde\u63a5\u5f3a\u5ea6\u989c\u8272\u6620\u5c04\u7684\u6700\u5c0f\u503c\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u6839\u636e\u6570\u636e\u81ea\u52a8\u786e\u5b9a\n        vmax (float | None, optional): \u8fde\u63a5\u5f3a\u5ea6\u989c\u8272\u6620\u5c04\u7684\u6700\u5927\u503c\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u6839\u636e\u6570\u636e\u81ea\u52a8\u786e\u5b9a\n        cmap (str | None, optional): \u989c\u8272\u6620\u5c04\u8868\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u65f6\u6839\u636eedge_color\u751f\u6210\n        edge_color (str, optional): \u8fde\u7ebf\u989c\u8272\uff0c\u5f53cmap\u4e3aNone\u65f6\u4f7f\u7528\u6b64\u989c\u8272\u751f\u6210\u989c\u8272\u6620\u5c04\u3002\u9ed8\u8ba4\u4e3a\"red\"\n        edge_alpha (float, optional): \u8fde\u7ebf\u900f\u660e\u5ea6\uff0c\u8303\u56f40-1\u3002\u9ed8\u8ba4\u4e3a1.0\uff08\u4e0d\u900f\u660e\uff09\n        colorbar (bool, optional): \u662f\u5426\u663e\u793a\u989c\u8272\u6761\u3002\u9ed8\u8ba4\u4e3aTrue\n        colorbar_orientation (Literal[\"vertical\", \"horizontal\"], optional): \u989c\u8272\u6761\u65b9\u5411\u3002\u9ed8\u8ba4\u4e3a\"vertical\"\n        colorbar_label (str, optional): \u989c\u8272\u6761\u6807\u7b7e\u6587\u672c\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\n\n    Raises:\n        ValueError: \u5f53connectome\u4e0d\u662f\u5bf9\u79f0\u77e9\u9635\u65f6\u629b\u51fa\n        ValueError: \u5f53vmin\u5927\u4e8evmax\u65f6\u629b\u51fa\n        TypeError: \u5f53\u63d0\u4f9b\u7684ax\u4e0d\u662fPolarAxes\u7c7b\u578b\u65f6\u629b\u51fa\n\n    Returns:\n        Figure | Axes: \u5982\u679cax\u4e3aNone\u5219\u8fd4\u56deFigure\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56deAxes\u5bf9\u8c61\n    \"\"\"\n\n    # \u68c0\u67e5\u8f93\u5165\u77e9\u9635\uff0c\u6307\u5b9acmap\n    if not is_symmetric_square(connectome):\n        raise ValueError(\"connectome \u4e0d\u662f\u5bf9\u79f0\u77e9\u9635\")\n    if np.all(connectome == 0):\n        logger.warning(\"connectome \u77e9\u9635\u6240\u6709\u5143\u7d20\u5747\u4e3a0\uff0c\u53ef\u80fd\u6ca1\u6709\u6709\u6548\u8fde\u63a5\u6570\u636e\")\n        vmax = float(0 if vmax is None else vmax)\n        vmin = float(0 if vmin is None else vmin)\n        colormap = gen_cmap(edge_color) if cmap is None else plt.get_cmap(cmap)\n    elif np.any(connectome &lt; 0):\n        logger.warning(\n            \"\u7531\u4e8e connectome \u5b58\u5728\u8d1f\u503c\uff0c\u8fde\u7ebf\u989c\u8272\u65e0\u6cd5\u81ea\u5b9a\u4e49\uff0c\u53ea\u80fd\u6b63\u503c\u663e\u793a\u7ea2\u8272\uff0c\u8d1f\u503c\u663e\u793a\u84dd\u8272\"\n        )\n        max_strength = np.abs(connectome[connectome != 0]).max()\n        vmax = float(max_strength if vmax is None else vmax)\n        vmin = float(-max_strength if vmin is None else vmin)\n        colormap = plt.get_cmap(\"bwr\")\n    else:\n        vmin = float(connectome.min() if vmin is None else vmin)\n        vmax = float(connectome.max() if vmax is None else vmax)\n        colormap = gen_cmap(edge_color) if cmap is None else plt.get_cmap(cmap)\n    if vmin &gt; vmax:\n        raise ValueError(f\"\u76ee\u524d{vmin=}\uff0c\u800c{vmax=}\u3002\u4f46\u662fvmin\u4e0d\u5f97\u5927\u4e8evmax\uff0c\u8bf7\u68c0\u67e5\u6570\u636e\")\n    norm = mcolors.Normalize(vmin=vmin, vmax=vmax)\n\n    # \u83b7\u53d6\u6570\u636e\u4fe1\u606f\n    node_num = connectome.shape[0]\n    node_names = _gen_node_name(connectome) if node_names is None else node_names\n\n    # \u7531\u4e8epycirclize\u7684\u7279\u6027\uff0csector\u987a\u5e8f\u53ea\u80fd\u4e3a\u987a\u65f6\u9488\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u6570\u636e\u8fdb\u884c\u7ffb\u8f6c\n    connectome = np.flip(connectome)\n    node_names = node_names[::-1]\n    if symmetric:\n        # \u753b\u5bf9\u79f0\u56fe\u9700\u989d\u5916\u505a\u534a\u7403\u7ffb\u8f6c\u5904\u7406\n        node_colors = (\n            gen_hex_colors(int(node_num / 2)) * 2\n            if node_colors is None\n            else node_colors[::-1]\n        )\n        connectome, node_names, node_colors = _process_sym(\n            connectome, node_names, node_colors\n        )\n        sectors = _gen_sym_sectors(node_names)\n    else:\n        node_colors = (\n            gen_hex_colors(node_num) if node_colors is None else node_colors[::-1]\n        )\n        sectors = {node_name: 1 for node_name in node_names}\n\n    edges = _gen_edges(connectome)\n    name2color = {\n        node_name: node_color for node_name, node_color in zip(node_names, node_colors)\n    }\n    circos = Circos(sectors, space=node_space)\n\n    # \u8bbe\u7f6e\u6247\u533a\n    for sector in circos.sectors:\n        if sector.name.startswith(\"_gap\"):\n            continue\n        sector.text(sector.name, size=node_label_fontsize)\n        track = sector.add_track((95, 100))\n        track.axis(fc=name2color[sector.name])\n\n    # \u8bbe\u7f6e\u8fde\u63a5\n    for edge in edges:\n        color = value_to_hex(edge[2], colormap, norm)\n        circos.link(\n            (node_names[edge[0]], 0.45, 0.55),\n            (node_names[edge[1]], 0.55, 0.45),\n            color=color,\n            alpha=edge_alpha,\n        )\n\n    # colorbar\n    if colorbar:\n        if colorbar_orientation == \"vertical\":\n            orientation = \"vertical\"\n            bounds = (1.1, 0.29, 0.02, 0.4)\n            label_kws = dict(size=12, rotation=270, labelpad=20)\n        else:\n            orientation = \"horizontal\"\n            bounds = (0.3, -0.1, 0.4, 0.03)\n            label_kws = dict(size=12)\n        circos.colorbar(\n            bounds=bounds,\n            orientation=orientation,\n            vmin=vmin,\n            vmax=vmax,\n            cmap=colormap,\n            label=colorbar_label,\n            label_kws=label_kws,\n            tick_kws=dict(labelsize=12),\n        )\n\n    # \u753b\u56fe\n    if ax is None:\n        fig = circos.plotfig()\n        return fig\n    else:\n        if isinstance(ax, PolarAxes):\n            circos.plotfig(ax=ax)\n            return ax\n        else:\n            raise ValueError(\"ax \u4e0d\u662f PolarAxes \u7c7b\u578b\")\n</code></pre>"},{"location":"api/#plotfig.brain_connection","title":"plotfig.brain_connection","text":""},{"location":"api/#plotfig.brain_connection.plot_brain_connection_figure","title":"plot_brain_connection_figure","text":"<pre><code>plot_brain_connection_figure(connectome, lh_surfgii_file, rh_surfgii_file, niigz_file, output_file=None, show_all_nodes=False, nodes_size=None, nodes_name=None, nodes_color=None, scale_method='', line_width=10, line_color='red')\n</code></pre> <p>\u7ed8\u5236\u5927\u8111\u8fde\u63a5\u56fe\uff0c\u4fdd\u5b58\u5728\u6307\u5b9a\u7684html\u6587\u4ef6\u4e2d\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>connectome</code> <code>NDArray</code> <p>\u5927\u8111\u8fde\u63a5\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a (n, n)\uff0c\u5176\u4e2d n \u662f\u8111\u533a\u6570\u91cf\u3002 \u77e9\u9635\u4e2d\u7684\u503c\u8868\u793a\u8111\u533a\u4e4b\u95f4\u7684\u8fde\u63a5\u5f3a\u5ea6\uff0c\u6b63\u503c\u8868\u793a\u6b63\u76f8\u5173\u8fde\u63a5\uff0c\u8d1f\u503c\u8868\u793a\u8d1f\u76f8\u5173\u8fde\u63a5\uff0c0\u8868\u793a\u65e0\u8fde\u63a5\u3002</p> \u5fc5\u9700 <code>lh_surfgii_file</code> <code>str | Path</code> <p>\u5de6\u534a\u8111\u8868\u9762\u51e0\u4f55\u6587\u4ef6\u8def\u5f84 (.surf.gii \u683c\u5f0f)\uff0c\u7528\u4e8e\u7ed8\u5236\u5de6\u534a\u8111\u8868\u9762</p> \u5fc5\u9700 <code>rh_surfgii_file</code> <code>str | Path</code> <p>\u53f3\u534a\u8111\u8868\u9762\u51e0\u4f55\u6587\u4ef6\u8def\u5f84 (.surf.gii \u683c\u5f0f)\uff0c\u7528\u4e8e\u7ed8\u5236\u53f3\u534a\u8111\u8868\u9762</p> \u5fc5\u9700 <code>niigz_file</code> <code>str | Path</code> <p>NIfTI\u683c\u5f0f\u7684\u8111\u533a\u56fe\u8c31\u6587\u4ef6\u8def\u5f84 (.nii.gz \u683c\u5f0f)\uff0c\u7528\u4e8e\u5b9a\u4f4d\u8111\u533a\u8282\u70b9\u7684\u4e09\u7ef4\u5750\u6807</p> \u5fc5\u9700 <code>output_file</code> <code>str | Path | None</code> <p>\u8f93\u51faHTML\u6587\u4ef6\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u65f6\u95f4\u6233\u751f\u6210\u6587\u4ef6\u540d\u3002\u9ed8\u8ba4\u4e3aNone</p> <code>None</code> <code>show_all_nodes</code> <code>bool</code> <p>\u662f\u5426\u663e\u793a\u6240\u6709\u8111\u533a\u8282\u70b9\u3002\u5982\u679c\u4e3aFalse\uff0c\u5219\u53ea\u663e\u793a\u6709\u8fde\u63a5\u7684\u8282\u70b9\u3002\u9ed8\u8ba4\u4e3aFalse</p> <code>False</code> <code>nodes_size</code> <code>Sequence[Num] | NDArray | None</code> <p>\u6bcf\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373\u6240\u6709\u8282\u70b9\u5927\u5c0f\u4e3a5</p> <code>None</code> <code>nodes_name</code> <code>list[str] | None</code> <p>\u6bcf\u4e2a\u8282\u70b9\u7684\u540d\u79f0\u6807\u7b7e\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373\u4e0d\u663e\u793a\u540d\u79f0</p> <code>None</code> <code>nodes_color</code> <code>list[str] | None</code> <p>\u6bcf\u4e2a\u8282\u70b9\u7684\u989c\u8272\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373\u6240\u6709\u8282\u70b9\u4e3a\u767d\u8272</p> <code>None</code> <code>scale_method</code> <code>Literal['', 'width', 'color', 'width_color', 'color_width']</code> <p>\u8fde\u63a5\u7ebf\u7684\u7f29\u653e\u65b9\u6cd5: - \"\" : \u6240\u6709\u8fde\u63a5\u7ebf\u5bbd\u5ea6\u548c\u989c\u8272\u56fa\u5b9a - \"width\" : \u6839\u636e\u8fde\u63a5\u5f3a\u5ea6\u8c03\u6574\u7ebf\u5bbd\uff0c\u6b63\u8fde\u63a5\u4e3a\u7ea2\u8272\uff0c\u8d1f\u8fde\u63a5\u4e3a\u84dd\u8272 - \"color\" : \u6839\u636e\u8fde\u63a5\u5f3a\u5ea6\u8c03\u6574\u989c\u8272(\u4f7f\u7528\u84dd\u767d\u7ea2\u989c\u8272\u6620\u5c04)\uff0c\u7ebf\u5bbd\u56fa\u5b9a - \"width_color\" or \"color_width\" : \u540c\u65f6\u6839\u636e\u8fde\u63a5\u5f3a\u5ea6\u8c03\u6574\u7ebf\u5bbd\u548c\u989c\u8272 \u9ed8\u8ba4\u4e3a \"\"</p> <code>''</code> <code>line_width</code> <code>Num</code> <p>\u8fde\u63a5\u7ebf\u7684\u57fa\u672c\u5bbd\u5ea6\u3002\u5f53scale_method\u5305\u542b\"width\"\u65f6\uff0c\u6b64\u503c\u4f5c\u4e3a\u6700\u5927\u5bbd\u5ea6\u53c2\u8003\u3002\u9ed8\u8ba4\u4e3a10</p> <code>10</code> <code>line_color</code> <code>str</code> <p>\u8fde\u63a5\u7ebf\u7684\u57fa\u672c\u989c\u8272\u3002\u5f53scale_method\u4e0d\u5305\u542b\"color\"\u65f6\u751f\u6548\u3002\u9ed8\u8ba4\u4e3a\"#ff0000\"(\u7ea2\u8272)</p> <code>'red'</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Figure</code> <p>go.Figure: Plotly\u56fe\u5f62\u5bf9\u8c61\uff0c\u5305\u542b\u7ed8\u5236\u7684\u5927\u8111\u8fde\u63a5\u56fe</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/brain_connection.py</code> <pre><code>def plot_brain_connection_figure(\n    connectome: npt.NDArray,\n    lh_surfgii_file: str | Path,\n    rh_surfgii_file: str | Path,\n    niigz_file: str | Path,\n    output_file: str | Path | None = None,\n    show_all_nodes: bool = False,\n    nodes_size: Sequence[Num] | npt.NDArray | None = None,\n    nodes_name: list[str] | None = None,\n    nodes_color: list[str] | None = None,\n    scale_method: Literal[\"\", \"width\", \"color\", \"width_color\", \"color_width\"] = \"\",\n    line_width: Num = 10,\n    line_color: str = \"red\",\n) -&gt; go.Figure:\n    \"\"\"\u7ed8\u5236\u5927\u8111\u8fde\u63a5\u56fe\uff0c\u4fdd\u5b58\u5728\u6307\u5b9a\u7684html\u6587\u4ef6\u4e2d\u3002\n\n    Args:\n        connectome (npt.NDArray):\n            \u5927\u8111\u8fde\u63a5\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a (n, n)\uff0c\u5176\u4e2d n \u662f\u8111\u533a\u6570\u91cf\u3002\n            \u77e9\u9635\u4e2d\u7684\u503c\u8868\u793a\u8111\u533a\u4e4b\u95f4\u7684\u8fde\u63a5\u5f3a\u5ea6\uff0c\u6b63\u503c\u8868\u793a\u6b63\u76f8\u5173\u8fde\u63a5\uff0c\u8d1f\u503c\u8868\u793a\u8d1f\u76f8\u5173\u8fde\u63a5\uff0c0\u8868\u793a\u65e0\u8fde\u63a5\u3002\n        lh_surfgii_file (str | Path):\n            \u5de6\u534a\u8111\u8868\u9762\u51e0\u4f55\u6587\u4ef6\u8def\u5f84 (.surf.gii \u683c\u5f0f)\uff0c\u7528\u4e8e\u7ed8\u5236\u5de6\u534a\u8111\u8868\u9762\n        rh_surfgii_file (str | Path):\n            \u53f3\u534a\u8111\u8868\u9762\u51e0\u4f55\u6587\u4ef6\u8def\u5f84 (.surf.gii \u683c\u5f0f)\uff0c\u7528\u4e8e\u7ed8\u5236\u53f3\u534a\u8111\u8868\u9762\n        niigz_file (str | Path):\n            NIfTI\u683c\u5f0f\u7684\u8111\u533a\u56fe\u8c31\u6587\u4ef6\u8def\u5f84 (.nii.gz \u683c\u5f0f)\uff0c\u7528\u4e8e\u5b9a\u4f4d\u8111\u533a\u8282\u70b9\u7684\u4e09\u7ef4\u5750\u6807\n        output_file (str | Path | None, optional):\n            \u8f93\u51faHTML\u6587\u4ef6\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u65f6\u95f4\u6233\u751f\u6210\u6587\u4ef6\u540d\u3002\u9ed8\u8ba4\u4e3aNone\n        show_all_nodes (bool, optional):\n            \u662f\u5426\u663e\u793a\u6240\u6709\u8111\u533a\u8282\u70b9\u3002\u5982\u679c\u4e3aFalse\uff0c\u5219\u53ea\u663e\u793a\u6709\u8fde\u63a5\u7684\u8282\u70b9\u3002\u9ed8\u8ba4\u4e3aFalse\n        nodes_size (Sequence[Num] | npt.NDArray | None, optional):\n            \u6bcf\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373\u6240\u6709\u8282\u70b9\u5927\u5c0f\u4e3a5\n        nodes_name (list[str] | None, optional):\n            \u6bcf\u4e2a\u8282\u70b9\u7684\u540d\u79f0\u6807\u7b7e\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373\u4e0d\u663e\u793a\u540d\u79f0\n        nodes_color (list[str] | None, optional):\n            \u6bcf\u4e2a\u8282\u70b9\u7684\u989c\u8272\uff0c\u957f\u5ea6\u5e94\u4e0e\u8111\u533a\u6570\u91cf\u4e00\u81f4\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373\u6240\u6709\u8282\u70b9\u4e3a\u767d\u8272\n        scale_method (Literal[\"\", \"width\", \"color\", \"width_color\", \"color_width\"], optional):\n            \u8fde\u63a5\u7ebf\u7684\u7f29\u653e\u65b9\u6cd5:\n            - \"\" : \u6240\u6709\u8fde\u63a5\u7ebf\u5bbd\u5ea6\u548c\u989c\u8272\u56fa\u5b9a\n            - \"width\" : \u6839\u636e\u8fde\u63a5\u5f3a\u5ea6\u8c03\u6574\u7ebf\u5bbd\uff0c\u6b63\u8fde\u63a5\u4e3a\u7ea2\u8272\uff0c\u8d1f\u8fde\u63a5\u4e3a\u84dd\u8272\n            - \"color\" : \u6839\u636e\u8fde\u63a5\u5f3a\u5ea6\u8c03\u6574\u989c\u8272(\u4f7f\u7528\u84dd\u767d\u7ea2\u989c\u8272\u6620\u5c04)\uff0c\u7ebf\u5bbd\u56fa\u5b9a\n            - \"width_color\" or \"color_width\" : \u540c\u65f6\u6839\u636e\u8fde\u63a5\u5f3a\u5ea6\u8c03\u6574\u7ebf\u5bbd\u548c\u989c\u8272\n            \u9ed8\u8ba4\u4e3a \"\"\n        line_width (Num, optional):\n            \u8fde\u63a5\u7ebf\u7684\u57fa\u672c\u5bbd\u5ea6\u3002\u5f53scale_method\u5305\u542b\"width\"\u65f6\uff0c\u6b64\u503c\u4f5c\u4e3a\u6700\u5927\u5bbd\u5ea6\u53c2\u8003\u3002\u9ed8\u8ba4\u4e3a10\n        line_color (str, optional):\n            \u8fde\u63a5\u7ebf\u7684\u57fa\u672c\u989c\u8272\u3002\u5f53scale_method\u4e0d\u5305\u542b\"color\"\u65f6\u751f\u6548\u3002\u9ed8\u8ba4\u4e3a\"#ff0000\"(\u7ea2\u8272)\n\n    Returns:\n        go.Figure: Plotly\u56fe\u5f62\u5bf9\u8c61\uff0c\u5305\u542b\u7ed8\u5236\u7684\u5927\u8111\u8fde\u63a5\u56fe\n    \"\"\"\n    _validate_connectome(connectome)\n\n    if np.any(connectome &lt; 0):\n        logger.warning(\n            \"\u7531\u4e8e connectome \u5b58\u5728\u8d1f\u503c\uff0c\u8fde\u7ebf\u989c\u8272\u65e0\u6cd5\u81ea\u5b9a\u4e49\uff0c\u53ea\u80fd\u6b63\u503c\u663e\u793a\u7ea2\u8272\uff0c\u8d1f\u503c\u663e\u793a\u84dd\u8272\"\n        )\n        line_color = \"#ff0000\"\n\n    nodes_num = connectome.shape[0]\n    nodes_name = nodes_name or [\"\"] * nodes_num\n    nodes_color = nodes_color or [\"white\"] * nodes_num\n    nodes_size = nodes_size or [5] * nodes_num\n\n    if output_file is None:\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        output_file = Path(f\"{timestamp}.html\")\n        logger.info(f\"\u672a\u6307\u5b9a\u4fdd\u5b58\u8def\u5f84\uff0c\u9ed8\u8ba4\u4fdd\u5b58\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u7684{output_file}\u4e2d\u3002\")\n\n    node_indices = _get_node_indices(connectome, show_all_nodes)\n    vertices_L, faces_L = _load_surface(lh_surfgii_file)\n    vertices_R, faces_R = _load_surface(rh_surfgii_file)\n\n    mesh_L = _create_mesh(vertices_L, faces_L, \"Left Hemisphere\")\n    mesh_R = _create_mesh(vertices_R, faces_R, \"Right Hemisphere\")\n\n    fig = go.Figure(data=[mesh_L, mesh_R])\n\n    centroids_real = _get_centroids_real(niigz_file)\n    _add_nodes_to_fig(\n        fig, centroids_real, node_indices, nodes_name, nodes_size, nodes_color\n    )\n    _add_edges_to_fig(\n        fig,\n        connectome,\n        centroids_real,\n        nodes_name,\n        scale_method,\n        line_width,\n        line_color,\n    )\n    _finalize_figure(fig)\n\n    fig.write_html(output_file)\n    return fig\n</code></pre>"},{"location":"api/#plotfig.brain_connection.save_brain_connection_frames","title":"save_brain_connection_frames","text":"<pre><code>save_brain_connection_frames(fig, output_dir, n_frames=36)\n</code></pre> <p>\u751f\u6210\u4e0d\u540c\u89d2\u5ea6\u7684\u9759\u6001\u56fe\u7247\u5e27\uff0c\u53ef\u7528\u4e8e\u5236\u4f5c\u65cb\u8f6c\u5927\u8111\u8fde\u63a5\u56fe\u7684 GIF\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>fig</code> <code>Figure</code> <p>Plotly \u7684 Figure \u5bf9\u8c61\uff0c\u5305\u542b\u5927\u8111\u8868\u9762\u548c\u8fde\u63a5\u56fe\u3002</p> \u5fc5\u9700 <code>output_dir</code> <code>str</code> <p>\u56fe\u7247\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u82e5\u6587\u4ef6\u5939\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa\u3002</p> \u5fc5\u9700 <code>n_frames</code> <code>int</code> <p>\u65cb\u8f6c\u5e27\u7684\u6570\u91cf\u3002\u9ed8\u8ba4 36\uff0c\u5373\u6bcf 10 \u5ea6\u4e00\u5e27\u3002</p> <code>36</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/brain_connection.py</code> <pre><code>def save_brain_connection_frames(\n    fig: go.Figure, output_dir: str | Path, n_frames: int = 36\n) -&gt; None:\n    \"\"\"\n    \u751f\u6210\u4e0d\u540c\u89d2\u5ea6\u7684\u9759\u6001\u56fe\u7247\u5e27\uff0c\u53ef\u7528\u4e8e\u5236\u4f5c\u65cb\u8f6c\u5927\u8111\u8fde\u63a5\u56fe\u7684 GIF\u3002\n\n    Args:\n        fig (go.Figure): Plotly \u7684 Figure \u5bf9\u8c61\uff0c\u5305\u542b\u5927\u8111\u8868\u9762\u548c\u8fde\u63a5\u56fe\u3002\n        output_dir (str): \u56fe\u7247\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u82e5\u6587\u4ef6\u5939\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa\u3002\n        n_frames (int, optional): \u65cb\u8f6c\u5e27\u7684\u6570\u91cf\u3002\u9ed8\u8ba4 36\uff0c\u5373\u6bcf 10 \u5ea6\u4e00\u5e27\u3002\n    \"\"\"\n    Path(output_dir).mkdir(parents=True, exist_ok=True)\n    angles = np.linspace(0, 360, n_frames, endpoint=False)\n    for i, angle in tqdm(enumerate(angles), total=len(angles)):\n        camera = dict(\n            eye=dict(\n                x=2 * np.cos(np.radians(angle)), y=2 * np.sin(np.radians(angle)), z=0.7\n            )\n        )\n        fig.update_layout(scene_camera=camera)\n        pio.write_image(fig, f\"{output_dir}/frame_{i:03d}.png\", width=800, height=800)\n    logger.info(f\"\u4fdd\u5b58\u4e86 {n_frames} \u5f20\u56fe\u7247\u5728 {output_dir}\")\n</code></pre>"},{"location":"api/#plotfig.utils","title":"plotfig.utils","text":""},{"location":"api/#plotfig.utils.gen_cmap","title":"gen_cmap","text":"<pre><code>gen_cmap(color='red')\n</code></pre> <p>\u751f\u6210\u4e00\u4e2a\u4ece\u767d\u8272\u5230\u6307\u5b9a\u989c\u8272\u7684\u7ebf\u6027\u6e10\u53d8\u8272\u56fe\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>color</code> <code>str</code> <p>\u6e10\u53d8\u7684\u76ee\u6807\u989c\u8272\uff0c\u9ed8\u8ba4\u4e3a \"red\"\u3002</p> <code>'red'</code> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>Colormap</code> <code>Colormap</code> <p>\u7ebf\u6027\u6e10\u53d8\u7684\u8272\u56fe\u5bf9\u8c61\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/utils/color.py</code> <pre><code>def gen_cmap(color: str = \"red\") -&gt; Colormap:\n    \"\"\"\n    \u751f\u6210\u4e00\u4e2a\u4ece\u767d\u8272\u5230\u6307\u5b9a\u989c\u8272\u7684\u7ebf\u6027\u6e10\u53d8\u8272\u56fe\u3002\n\n    Args:\n        color (str, optional): \u6e10\u53d8\u7684\u76ee\u6807\u989c\u8272\uff0c\u9ed8\u8ba4\u4e3a \"red\"\u3002\n\n    Returns:\n        Colormap: \u7ebf\u6027\u6e10\u53d8\u7684\u8272\u56fe\u5bf9\u8c61\u3002\n    \"\"\"\n\n    cmap = LinearSegmentedColormap.from_list(\"white_to_color\", [\"white\", color])\n    return cmap\n</code></pre>"},{"location":"api/#plotfig.utils.gen_hex_colors","title":"gen_hex_colors","text":"<pre><code>gen_hex_colors(n, seed=42)\n</code></pre> <p>\u751f\u6210 n \u4e2a\u968f\u673a\u7684\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>n</code> <code>int</code> <p>\u9700\u8981\u751f\u6210\u7684\u989c\u8272\u6570\u91cf\u3002</p> \u5fc5\u9700 <code>seed</code> <code>int</code> <p>\u968f\u673a\u79cd\u5b50\uff0c\u9ed8\u8ba4\u4e3a 42\u3002</p> <code>42</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>list[str]</code> <p>list[str]: \u5305\u542b n \u4e2a\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/utils/color.py</code> <pre><code>def gen_hex_colors(n: int, seed: int = 42) -&gt; list[str]:\n    \"\"\"\n    \u751f\u6210 n \u4e2a\u968f\u673a\u7684\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u3002\n\n    Args:\n        n (int): \u9700\u8981\u751f\u6210\u7684\u989c\u8272\u6570\u91cf\u3002\n        seed (int, optional): \u968f\u673a\u79cd\u5b50\uff0c\u9ed8\u8ba4\u4e3a 42\u3002\n\n    Returns:\n        list[str]: \u5305\u542b n \u4e2a\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\n    \"\"\"\n\n    RNG = np.random.default_rng(seed=seed)\n    rgb = RNG.integers(0, 256, size=(n, 3))  # n\u00d73 \u7684\u6574\u6570\u77e9\u9635\n    colors = [f\"#{r:02x}{g:02x}{b:02x}\" for r, g, b in rgb]\n    return colors\n</code></pre>"},{"location":"api/#plotfig.utils.gen_symmetric_matrix","title":"gen_symmetric_matrix","text":"<pre><code>gen_symmetric_matrix(n, mode='nonneg', sparsity=1.0, seed=42)\n</code></pre> <p>\u751f\u6210\u4e00\u4e2a\u5bf9\u79f0\u65b9\u9635\uff0c\u53ef\u4ee5\u6307\u5b9a\u5143\u7d20\u8303\u56f4\u548c\u7a00\u758f\u5ea6\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>n</code> <code>int</code> <p>\u65b9\u9635\u7684\u7ef4\u5ea6\u3002</p> \u5fc5\u9700 <code>mode</code> <code>str</code> <p>\u5143\u7d20\u7c7b\u578b\uff0c\"nonneg\" \u8868\u793a\u975e\u8d1f\uff0c\"all\" \u8868\u793a\u53ef\u4e3a\u8d1f\u3002\u9ed8\u8ba4\u4e3a \"nonneg\"\u3002</p> <code>'nonneg'</code> <code>sparsity</code> <code>float</code> <p>\u7a00\u758f\u5ea6\uff0c\u53d6\u503c\u8303\u56f4 [0, 1]\uff0c1 \u8868\u793a\u5168\u5bc6\u96c6\uff0c0 \u8868\u793a\u5168\u96f6\u3002\u9ed8\u8ba4\u4e3a 1.0\u3002</p> <code>1.0</code> <code>seed</code> <code>int</code> <p>\u968f\u673a\u79cd\u5b50\uff0c\u9ed8\u8ba4\u4e3a 42\u3002</p> <code>42</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5982\u679c mode \u4e0d\u662f \"nonneg\" \u6216 \"all\"\u3002</p> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>NDArray</code> <code>NDArray</code> <p>\u751f\u6210\u7684\u5bf9\u79f0\u65b9\u9635\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/utils/matrix.py</code> <pre><code>def gen_symmetric_matrix(\n    n, mode=\"nonneg\", sparsity: float = 1.0, seed: int = 42\n) -&gt; NDArray:\n    \"\"\"\n    \u751f\u6210\u4e00\u4e2a\u5bf9\u79f0\u65b9\u9635\uff0c\u53ef\u4ee5\u6307\u5b9a\u5143\u7d20\u8303\u56f4\u548c\u7a00\u758f\u5ea6\u3002\n\n    Args:\n        n (int): \u65b9\u9635\u7684\u7ef4\u5ea6\u3002\n        mode (str, optional): \u5143\u7d20\u7c7b\u578b\uff0c\"nonneg\" \u8868\u793a\u975e\u8d1f\uff0c\"all\" \u8868\u793a\u53ef\u4e3a\u8d1f\u3002\u9ed8\u8ba4\u4e3a \"nonneg\"\u3002\n        sparsity (float, optional): \u7a00\u758f\u5ea6\uff0c\u53d6\u503c\u8303\u56f4 [0, 1]\uff0c1 \u8868\u793a\u5168\u5bc6\u96c6\uff0c0 \u8868\u793a\u5168\u96f6\u3002\u9ed8\u8ba4\u4e3a 1.0\u3002\n        seed (int, optional): \u968f\u673a\u79cd\u5b50\uff0c\u9ed8\u8ba4\u4e3a 42\u3002\n\n    Raises:\n        ValueError: \u5982\u679c mode \u4e0d\u662f \"nonneg\" \u6216 \"all\"\u3002\n\n    Returns:\n        NDArray: \u751f\u6210\u7684\u5bf9\u79f0\u65b9\u9635\u3002\n    \"\"\"\n    # \u521b\u5efa\u968f\u673a\u6570\u751f\u6210\u5668\n    RNG = np.random.default_rng(seed=seed)\n    # \u751f\u6210\u6743\u91cd\u77e9\u9635\u4e0a\u4e09\u89d2\n    if mode == \"nonneg\":\n        upper = np.triu(RNG.random((n, n)), k=1)\n    elif mode == \"all\":\n        upper = np.triu(RNG.uniform(-1, 1, size=(n, n)), k=1)\n    else:\n        raise ValueError(\"mode must be 'nonneg' or 'all'\")\n    # \u7a00\u758f\u5316\uff1a\u968f\u673a\u751f\u6210mask\n    if sparsity &lt; 1.0:\n        mask = RNG.random((n, n)) &lt; sparsity\n        mask = np.triu(mask, k=1)  # \u4e0a\u4e09\u89d2mask\n        upper *= mask\n    # \u6784\u9020\u5bf9\u79f0\u77e9\u9635\n    mat = upper + upper.T\n    np.fill_diagonal(mat, 0.0)\n    return mat\n</code></pre>"},{"location":"api/#plotfig.utils.is_symmetric_square","title":"is_symmetric_square","text":"<pre><code>is_symmetric_square(matrix, tol=1e-08)\n</code></pre> <p>\u5224\u65ad\u4e00\u4e2a\u77e9\u9635\u662f\u5426\u4e3a\u5bf9\u79f0\u65b9\u9635\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>matrix</code> <code>NDArray</code> <p>\u5f85\u5224\u65ad\u7684\u77e9\u9635\u3002</p> \u5fc5\u9700 <code>tol</code> <code>float</code> <p>\u5224\u65ad\u5bf9\u79f0\u6027\u7684\u5bb9\u5dee\uff0c\u9ed8\u8ba4\u4e3a 1e-8\u3002</p> <code>1e-08</code> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <code>bool</code> <p>\u5982\u679c\u662f\u5bf9\u79f0\u65b9\u9635\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/utils/matrix.py</code> <pre><code>def is_symmetric_square(matrix: NDArray, tol: float = 1e-8) -&gt; bool:\n    \"\"\"\n    \u5224\u65ad\u4e00\u4e2a\u77e9\u9635\u662f\u5426\u4e3a\u5bf9\u79f0\u65b9\u9635\u3002\n\n    Args:\n        matrix (NDArray): \u5f85\u5224\u65ad\u7684\u77e9\u9635\u3002\n        tol (float, optional): \u5224\u65ad\u5bf9\u79f0\u6027\u7684\u5bb9\u5dee\uff0c\u9ed8\u8ba4\u4e3a 1e-8\u3002\n\n    Returns:\n        bool: \u5982\u679c\u662f\u5bf9\u79f0\u65b9\u9635\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n    \"\"\"\n    # 1. \u68c0\u67e5\u662f\u5426\u4e3a\u65b9\u9635\n    if matrix.ndim != 2 or matrix.shape[0] != matrix.shape[1]:\n        return False\n\n    # 2. \u68c0\u67e5\u662f\u5426\u5bf9\u79f0\n    return np.allclose(matrix, matrix.T, atol=tol)\n</code></pre>"},{"location":"api/#plotfig.utils.value_to_hex","title":"value_to_hex","text":"<pre><code>value_to_hex(value, cmap, norm)\n</code></pre> <p>\u6839\u636e\u6570\u503c\u3001\u8272\u56fe\u548c\u5f52\u4e00\u5316\u5bf9\u8c61\uff0c\u5c06\u6570\u503c\u6620\u5c04\u4e3a\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>value</code> <code>float</code> <p>\u9700\u8981\u6620\u5c04\u7684\u6570\u503c\u3002</p> \u5fc5\u9700 <code>cmap</code> <code>Colormap</code> <p>\u7528\u4e8e\u6620\u5c04\u7684\u8272\u56fe\u5bf9\u8c61\u3002</p> \u5fc5\u9700 <code>norm</code> <code>Normalize</code> <p>\u7528\u4e8e\u5f52\u4e00\u5316\u7684\u5bf9\u8c61\u3002</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>str</code> <code>str</code> <p>\u6620\u5c04\u5f97\u5230\u7684\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/plotfig/utils/color.py</code> <pre><code>def value_to_hex(value: float, cmap: Colormap, norm: Normalize) -&gt; str:\n    \"\"\"\n    \u6839\u636e\u6570\u503c\u3001\u8272\u56fe\u548c\u5f52\u4e00\u5316\u5bf9\u8c61\uff0c\u5c06\u6570\u503c\u6620\u5c04\u4e3a\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u3002\n\n    Args:\n        value (float): \u9700\u8981\u6620\u5c04\u7684\u6570\u503c\u3002\n        cmap (Colormap): \u7528\u4e8e\u6620\u5c04\u7684\u8272\u56fe\u5bf9\u8c61\u3002\n        norm (Normalize): \u7528\u4e8e\u5f52\u4e00\u5316\u7684\u5bf9\u8c61\u3002\n\n    Returns:\n        str: \u6620\u5c04\u5f97\u5230\u7684\u5341\u516d\u8fdb\u5236\u989c\u8272\u5b57\u7b26\u4e32\u3002\n    \"\"\"\n\n    rgba = cmap(norm(value))  # \u5f97\u5230 RGBA\n    return mcolors.to_hex(rgba)\n</code></pre>"},{"location":"usage/brain_connectivity/","title":"\u8111\u8fde\u63a5\u56fe","text":"<p>\u900f\u660e\u7684\u5927\u8111\u56fe\uff0c\u53ef\u4ee5\u5c55\u793a\u8111\u533a\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u3002 \u9700\u8981\u51c6\u5907\u5de6\u53f3\u534a\u8111\u7684surface\u6587\u4ef6\u3001\u8111\u533a\u76f8\u5173\u7684nii.gz\u6587\u4ef6\u4ee5\u53ca\u8fde\u63a5\u77e9\u9635\u3002</p> <pre><code>import numpy as np\nfrom plotfig import *\n\n# \u751f\u6210\u4e00\u4e2a 31x31 \u7684\u8fde\u63a5\u77e9\u9635\uff08\u5bf9\u79f0\u52a0\u6743\u77e9\u9635\uff0c\u5bf9\u89d2\u7ebf\u4e3a0\uff09\nmatrix = np.zeros((31, 31))\nmatrix[0, 1] = 1\nmatrix[0, 2] = 2\nmatrix[0, 3] = 3\nmatrix[4, 1] = -1\nmatrix[4, 2] = -2\nmatrix[4, 3] = -3\nmatrix = (matrix + matrix.T) / 2  # \u77e9\u9635\u5bf9\u79f0\n\nconnectome = matrix\n\noutput_file = \"./figures/brain_connection.html\"\n\nlh_surfgii_file = r\"e:\\6_Self\\plot_self_brain_connectivity\\103818.L.midthickness.32k_fs_LR.surf.gii\"\nrh_surfgii_file = r\"e:\\6_Self\\plot_self_brain_connectivity\\103818.R.midthickness.32k_fs_LR.surf.gii\"\nniigz_file = rf\"e:\\6_Self\\plot_self_brain_connectivity\\human_Self_processing_network.nii.gz\"\n\nfig = plot_brain_connection_figure(\n    connectome,\n    lh_surfgii_file=lh_surfgii_file,\n    rh_surfgii_file=rh_surfgii_file,\n    niigz_file=niigz_file,\n    output_file=output_file,\n    scale_method=\"width\",\n    line_width=10,\n)\n</code></pre> <p></p> <p>html\u6587\u4ef6\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4ea4\u4e92\u3002\u53ef\u4ee5\u624b\u52a8\u622a\u56fe\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u751f\u6210\u56fe\u7247\u3002</p> <pre><code>from pathlib import Path\n\n\nPath(f\"./figures/brain_connection\").mkdir(parents=True, exist_ok=True)  # \u65b0\u5efa\u6587\u4ef6\u5939\u4fdd\u5b58\u5e27\u56fe\nsave_brain_connection_frames(fig, output_dir=rf\"./figures/brain_connection\", n_frames=36)\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 36/36 [02:01&lt;00:00,  3.37s/it]\n\n\u4fdd\u5b58\u4e86 36 \u5f20\u56fe\u7247\u5728 ./figures/brain_connection\n</code></pre>"},{"location":"usage/brain_surface/","title":"\u8111\u533a\u56fe","text":"<p>\u8111\u533a\u56fe\u662f\u4e00\u79cd\u7528\u4e8e\u5728\u5927\u8111\u76ae\u5c42\u8868\u9762\u53ef\u89c6\u5316\u6570\u503c\u6570\u636e\u7684\u56fe\u8868\u3002 \u5b83\u80fd\u591f\u5c06\u4e0d\u540c\u8111\u533a\u7684\u6570\u503c\u6620\u5c04\u5230\u5927\u8111\u76ae\u5c42\u7684\u76f8\u5e94\u533a\u57df\uff0c\u5e76\u4ee5\u989c\u8272\u7f16\u7801\u7684\u65b9\u5f0f\u5c55\u793a\u8fd9\u4e9b\u6570\u503c\u7684\u5206\u5e03\u60c5\u51b5\u3002 \u8fd9\u79cd\u56fe\u8868\u5e38\u7528\u4e8e\u5c55\u793a\u795e\u7ecf\u79d1\u5b66\u7814\u7a76\u4e2d\u7684\u5404\u79cd\u8111\u533a\u6307\u6807\uff0c\u5982BOLD\u4fe1\u53f7\u5f3a\u5ea6\u3001\u9ad3\u9798\u5316\u7a0b\u5ea6\u3001\u4f53\u79ef\u6216\u539a\u5ea6\u6216\u5176\u4ed6\u6570\u503c\u5316\u7684\u5927\u8111\u7279\u5f81\u3002</p> <p><code>plot_brain_surface_figure</code> \u51fd\u6570\u57fa\u4e8e <code>surfplot</code> \u5e93\u5f00\u53d1\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u4e14\u7b80\u5316\u7684\u63a5\u53e3\u6765\u7ed8\u5236\u4eba\u8111\u3001\u7315\u7334\u8111\u548c\u9ed1\u7329\u7329\u8111\u7684\u8111\u533a\u56fe\u3002 \u76ee\u524d\u652f\u6301\u591a\u79cd\u8111\u56fe\u8c31\u5305\u62ec\uff1a</p> <ol> <li>\u4eba Glasser (HCP-MMP) \u56fe\u96c6<sup>1</sup>\u3002\u56fe\u96c6 CSV \u6587\u4ef6\u3002</li> <li>\u4eba BNA \u56fe\u96c6<sup>2</sup>\u3002\u56fe\u96c6 CSV \u6587\u4ef6\u3002</li> <li>\u9ed1\u7329\u7329 BNA \u56fe\u96c6<sup>3</sup>\u3002\u56fe\u96c6 CSV \u6587\u4ef6\u3002</li> <li>\u7315\u7334 CHARM 5-level <sup>4</sup>\u3002\u56fe\u96c6 CSV \u6587\u4ef6\u3002</li> <li>\u7315\u7334 CHARM 6-level <sup>4</sup>\u3002\u56fe\u96c6 CSV \u6587\u4ef6\u3002</li> <li>\u7315\u7334 BNA \u56fe\u96c6<sup>5</sup>\u3002\u56fe\u96c6 CSV \u6587\u4ef6\u3002</li> <li>\u7315\u7334 D99 \u56fe\u96c6<sup>6</sup>\u3002\u56fe\u96c6 CSV \u6587\u4ef6\u3002</li> </ol>"},{"location":"usage/brain_surface/#_2","title":"\u5168\u8111","text":""},{"location":"usage/brain_surface/#_3","title":"\u5feb\u901f\u51fa\u56fe","text":"<p>Info</p> <p>\u753b\u56fe\u524d\u8bf7\u786e\u4fdd\u8111\u533a\u540d\u5b57\u6b63\u786e\u3002</p> <pre><code>from plotfig import *\n\ndata = {\"lh_V1\": 1, \"rh_MT\": 1.5}\n\nax = plot_brain_surface_figure(data, species=\"human\", atlas=\"glasser\")\n</code></pre> <p></p> <pre><code>import matplotlib.pyplot as plt\nfrom plotfig import *\n\nmacaque_data = {\"lh_V1\": 1}\nchimpanzee_data = {\"lh_MVOcC.rv\": 1}\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1 = plot_brain_surface_figure(\n    chimpanzee_data, species=\"chimpanzee\", atlas=\"bna\", ax=ax1, title_name=\"Chimpanzee\"\n)\nax2 = plot_brain_surface_figure(\n    macaque_data, species=\"macaque\", atlas=\"charm5\", ax=ax2, title_name=\"Macaque\"\n)\n</code></pre> <p></p>"},{"location":"usage/brain_surface/#_4","title":"\u53c2\u6570\u8bbe\u7f6e","text":"<p>\u5168\u90e8\u53c2\u6570\u89c1 <code>plot_brain_surface_figure</code> \u7684 API \u6587\u6863\u3002</p> <pre><code>from plotfig import *\n\ndata = {\"lh_V1\": 1, \"rh_MT\": 1.5, \"rh_V1\": -1}\n\nax = plot_brain_surface_figure(\n    data,\n    species=\"human\",\n    atlas=\"glasser\",\n    surf=\"inflated\",\n    cmap=\"bwr\",\n    vmin=-1,\n    vmax=1,\n    colorbar=True,\n    colorbar_label_name=\"AAA\"\n)\n</code></pre> <p></p> <ol> <li> <p>Glasser, M. F., Coalson, T. S., Robinson, E. C., Hacker, C. D., Harwell, J., Yacoub, E., Ugurbil, K., Andersson, J., Beckmann, C. F., Jenkinson, M., Smith, S. M., &amp; Van Essen, D. C. (2016). A multi-modal parcellation of human cerebral cortex. Nature, 536(7615), Article 7615. https://doi.org/10.1038/nature18933 \u21a9</p> </li> <li> <p>Fan, L., Li, H., Zhuo, J., Zhang, Y., Wang, J., Chen, L., Yang, Z., Chu, C., Xie, S., Laird, A. R., Fox, P. T., Eickhoff, S. B., Yu, C., &amp; Jiang, T. (2016). The Human Brainnetome Atlas: A New Brain Atlas Based on Connectional Architecture. Cerebral Cortex (New York, N.Y.: 1991), 26(8), 3508\u20133526. https://doi.org/10.1093/cercor/bhw157 \u21a9</p> </li> <li> <p>Wang, Y., Cheng, L., Li, D., Lu, Y., Wang, C., Wang, Y., Gao, C., Wang, H., Erichsen, C. T., Vanduffel, W., Hopkins, W. D., Sherwood, C. C., Jiang, T., Chu, C., &amp; Fan, L. (2025). The Chimpanzee Brainnetome Atlas reveals distinct connectivity and gene expression profiles relative to humans. The Innovation, 0(0). https://doi.org/10.1016/j.xinn.2024.100755 \u21a9</p> </li> <li> <p>Jung, B., Taylor, P. A., Seidlitz, J., Sponheim, C., Perkins, P., Ungerleider, L. G., Glen, D., &amp; Messinger, A. (2021). A comprehensive macaque fMRI pipeline and hierarchical atlas. NeuroImage, 235, 117997. https://doi.org/10.1016/j.neuroimage.2021.117997 \u21a9\u21a9</p> </li> <li> <p>Lu, Y., Cui, Y., Cao, L., Dong, Z., Cheng, L., Wu, W., Wang, C., Liu, X., Liu, Y., Zhang, B., Li, D., Zhao, B., Wang, H., Li, K., Ma, L., Shi, W., Li, W., Ma, Y., Du, Z., \u2026 Jiang, T. (2024). Macaque Brainnetome Atlas: A multifaceted brain map with parcellation, connection, and histology. Science Bulletin, 69(14), 2241\u20132259. https://doi.org/10.1016/j.scib.2024.03.031 \u21a9</p> </li> <li> <p>Reveley, C., Gruslys, A., Ye, F. Q., Glen, D., Samaha, J., E. Russ, B., Saad, Z., K. Seth, A., Leopold, D. A., &amp; Saleem, K. S. (2017). Three-Dimensional Digital Template Atlas of the Macaque Brain. Cerebral Cortex, 27(9), 4463\u20134477. https://doi.org/10.1093/cercor/bhw248 \u21a9</p> </li> </ol>"},{"location":"usage/circos/","title":"\u5f26\u56fe","text":""},{"location":"usage/circos/#_2","title":"\u5feb\u901f\u51fa\u56fe","text":"<p>\u5f26\u56fe\u662f\u4e00\u79cd\u7528\u4e8e\u5c55\u793a\u5927\u8111\u4e0d\u540c\u533a\u57df\u4e4b\u95f4\u8fde\u63a5\u5173\u7cfb\u7684\u53ef\u89c6\u5316\u56fe\u8868\u3002 \u901a\u8fc7\u5f27\u7ebf\u5c06\u8111\u533a\u76f8\u8fde\uff0c\u53ef\u4ee5\u5feb\u901f\u4e86\u89e3\u8111\u533a\u4e4b\u95f4\u7684\u8fde\u63a5\u3002</p> <pre><code>from plotfig import plot_circos_figure\nfrom plotfig.utils import gen_symmetric_matrix\n\n# \u968f\u673a\u751f\u6210\u5bf9\u79f0\u52a0\u6743\u77e9\u9635\uff08\u5bf9\u89d2\u7ebf\u4e3a0\uff09\nconnectome = gen_symmetric_matrix(30, mode=\"nonneg\", sparsity=0.1)\n\n# \u753b\u56fe\nfig = plot_circos_figure(connectome)\n\n# \u4fdd\u5b58\u56fe\u7247\n# fig.savefig(\"./figures/circos1.png\")\n</code></pre> <p></p>"},{"location":"usage/circos/#_3","title":"\u53c2\u6570\u8bbe\u7f6e","text":"<p>\u5168\u90e8\u53c2\u6570\u89c1<code>plot_circos_figure</code>\u7684 API \u6587\u6863\u3002</p> <pre><code>from plotfig import plot_circos_figure\nfrom plotfig.utils import gen_symmetric_matrix\n\n# \u968f\u673a\u751f\u6210\u4e00\u4e2a10x10\u7684\u5bf9\u79f0\u52a0\u6743\u77e9\u9635\uff08\u5bf9\u89d2\u7ebf\u4e3a0\uff09\nconnectome = gen_symmetric_matrix(10, mode=\"nonneg\", sparsity=0.2)\nnode_names = [\"lh_A\", \"lh_B\", \"lh_C\", \"lh_D\", \"lh_E\", \"rh_A\", \"rh_B\", \"rh_C\", \"rh_D\", \"rh_E\"]\nnode_colors = [\"#ff0000\", \"blue\", \"green\", \"yellow\", \"orange\", \"red\", \"blue\", \"green\", \"yellow\", \"orange\"]\n\n# \u753b\u56fe\nfig = plot_circos_figure(\n    connectome,\n    symmetric=True,\n    node_names=node_names,\n    node_colors=node_colors,\n    node_space=2,\n    node_label_fontsize=15,\n    vmin=0.1,\n    vmax=0.9,\n    edge_color=\"purple\",\n    edge_alpha=0.8,\n    colorbar=True,\n    colorbar_orientation=\"horizontal\",\n    colorbar_label=\"Conncetivity\",\n)\n\n# \u4fdd\u5b58\u56fe\u7247\n# fig.savefig(\"./figures/circos.png\")\n</code></pre> <p></p>"},{"location":"usage/circos/#_4","title":"\u4e0e\u5176\u4ed6\u56fe\u7ec4\u5408","text":"<p>\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>plot_circos_figure</code> \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a <code>fig</code>\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u4fdd\u5b58\uff0c\u4f8b\u5982 <code>fig.savefig(\"./figures/circos.png\")</code>\u3002</p> <p>\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd4\u56de <code>ax</code>\uff0c\u4ee5\u4fbf\u5c06\u5176\u4e0e\u5176\u4ed6\u56fe\u7ec4\u5408\u4f7f\u7528\u3002</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotfig import plot_circos_figure\nfrom plotfig.utils import gen_symmetric_matrix\n\nfig = plt.figure(figsize=(6, 3))\n\nax1 = fig.add_subplot(1, 2, 1)\nax1.plot([1, 2, 3, 4], [2, 1, 4, 3])\n\nax2 = fig.add_subplot(1, 2, 2, projection=\"polar\")\nconnectome = gen_symmetric_matrix(10, mode=\"nonneg\", sparsity=0.1)\nax2 = plot_circos_figure(connectome, ax=ax2)\n\n# \u4fdd\u5b58\u56fe\u7247\n# fig.savefig(\"./figures/circos.png\")\n</code></pre> <p></p>"},{"location":"usage/circos/#_5","title":"\u5bf9\u79f0\u4e0e\u975e\u5bf9\u79f0\u5f26\u56fe","text":"<p><code>plotfig</code> \u53ef\u4ee5\u7ed8\u5236\u5bf9\u79f0\u6216\u4e0d\u5bf9\u79f0\u4e24\u79cd\u6837\u5f0f\u7684\u5f26\u56fe\u3002\u53ea\u9700\u901a\u8fc7 <code>symmetric</code> \u53c2\u6570\u8fdb\u884c\u8bbe\u7f6e\u3002</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotfig import plot_circos_figure\nfrom plotfig.utils import gen_symmetric_matrix\n\nfig = plt.figure(figsize=(7, 3))\nax1 = fig.add_subplot(1, 2, 1, projection=\"polar\")\nax2 = fig.add_subplot(1, 2, 2, projection=\"polar\")\n\nconnectome = gen_symmetric_matrix(10, mode=\"nonneg\", sparsity=0.1)\n\nax1 = plot_circos_figure(connectome, symmetric=True, ax=ax1, colorbar=False)\nax2 = plot_circos_figure(connectome, symmetric=False, ax=ax2)\n\n# \u4fdd\u5b58\u56fe\u7247\n# fig.savefig(\"./figures/circos.png\")\n</code></pre> <p></p>"},{"location":"usage/circos/#_6","title":"\u8fb9\u7684\u989c\u8272","text":"<p><code>edge_color</code> \u53c2\u6570\u53ef\u7528\u4e8e\u8bbe\u7f6e\u8fb9\u7684\u989c\u8272\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u8fb9\u7684\u6df1\u6d45\u4ecd\u4f1a\u6839\u636e\u8fde\u63a5\u6743\u91cd\u81ea\u52a8\u8c03\u6574\u3002</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotfig import plot_circos_figure\nfrom plotfig.utils import gen_symmetric_matrix\n\nfig = plt.figure(figsize=(12, 3), layout=\"constrained\")\nax1 = fig.add_subplot(1, 3, 1, projection=\"polar\")\nax2 = fig.add_subplot(1, 3, 2, projection=\"polar\")\nax3 = fig.add_subplot(1, 3, 3, projection=\"polar\")\n\nconnectome = gen_symmetric_matrix(10, mode=\"nonneg\", sparsity=0.1)\n\nax1 = plot_circos_figure(connectome, ax=ax1, edge_color=\"red\")\nax2 = plot_circos_figure(connectome, ax=ax2, edge_color=\"green\")\nax3 = plot_circos_figure(connectome, ax=ax3, edge_color=\"blue\")\n\n# \u4fdd\u5b58\u56fe\u7247\n# fig.savefig(\"./figures/circos.png\")\n</code></pre> <p></p> <p>\u4e5f\u53ef\u4ee5\u901a\u8fc7 <code>cmap</code> \u53c2\u6570\u5e94\u7528 Matplotlib \u5185\u7f6e\u7684\u5e38\u7528\u989c\u8272\u6620\u5c04\uff08Colormap\uff09\u3002</p> <p>Warning</p> <p>\u5f53\u4f7f\u7528<code>cmap</code>\u65f6\uff0c<code>edge_color</code>\u53c2\u6570\u5c06\u4e0d\u518d\u751f\u6548\u3002</p> <pre><code>import matplotlib.pyplot as plt\nfrom plotfig import plot_circos_figure\nfrom plotfig.utils import gen_symmetric_matrix\n\nfig = plt.figure(figsize=(12, 3), layout=\"constrained\")\nax1 = fig.add_subplot(1, 3, 1, projection=\"polar\")\nax2 = fig.add_subplot(1, 3, 2, projection=\"polar\")\nax3 = fig.add_subplot(1, 3, 3, projection=\"polar\")\n\nconnectome = gen_symmetric_matrix(10, mode=\"nonneg\", sparsity=0.1)\n\nax1 = plot_circos_figure(connectome, ax=ax1, cmap=\"Reds\")\nax2 = plot_circos_figure(connectome, ax=ax2, cmap=\"viridis\")\nax3 = plot_circos_figure(connectome, ax=ax3, cmap=\"bwr\")\n\n# \u4fdd\u5b58\u56fe\u7247\n# fig.savefig(\"./figures/circos.png\")\n</code></pre> <p></p> <p>\u5f53 connectome \u6570\u636e\u4e2d\u5b58\u5728\u8d1f\u503c\u65f6\uff0c\u65e0\u6cd5\u81ea\u5b9a\u4e49\u8fb9\u7684\u989c\u8272\uff0c\u7cfb\u7edf\u5c06\u9ed8\u8ba4\u4f7f\u7528 Matplotlib \u7684 <code>bwr</code> \u989c\u8272\u6620\u5c04\u3002</p> <pre><code>from plotfig import plot_circos_figure\nfrom plotfig.utils import gen_symmetric_matrix\n\n# \u751f\u6210\u5e26\u8d1f\u503c\u7684\u5bf9\u79f0\u77e9\u9635\nconnectome = gen_symmetric_matrix(10, mode=\"all\", sparsity=0.1)\n\nfig = plot_circos_figure(connectome)\n\n# \u4fdd\u5b58\u56fe\u7247\n# fig.savefig(\"./figures/circos.png\")\n</code></pre> <pre><code>\u001b[32m2025-09-05 15:09:37.347\u001b[0m | \u001b[33m\u001b[1mWARNING \u001b[0m | \u001b[36mplotfig.circos\u001b[0m:\u001b[36mplot_circos_figure\u001b[0m:\u001b[36m116\u001b[0m - \u001b[33m\u001b[1m\u7531\u4e8e connectome \u5b58\u5728\u8d1f\u503c\uff0c\u8fde\u7ebf\u989c\u8272\u65e0\u6cd5\u81ea\u5b9a\u4e49\uff0c\u53ea\u80fd\u6b63\u503c\u663e\u793a\u7ea2\u8272\uff0c\u8d1f\u503c\u663e\u793a\u84dd\u8272\u001b[0m\n</code></pre> <p></p>"},{"location":"usage/correlation/","title":"\u76f8\u5173\u56fe","text":"<p>\u70b9\u7ebf\u76f8\u5173\u56fe\u662f\u4e00\u7c7b\u7528\u4e8e\u5c55\u793a\u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u76f8\u5173\u5173\u7cfb\u7684\u53ef\u89c6\u5316\u56fe\u5f62\uff0c\u901a\u5e38\u5728\u56fe\u4e2d\u7ed8\u5236\u6bcf\u4e2a\u6837\u672c\u7684\u4e00\u5bf9\u53d8\u91cf\u503c\u4f5c\u4e3a\u70b9\uff0c\u5e76\u901a\u8fc7\u62df\u5408\u7ebf\u3001\u76f8\u5173\u7cfb\u6570\u548c\u663e\u8457\u6027\u6807\u6ce8\u6765\u4f53\u73b0\u5b83\u4eec\u7684\u76f8\u5173\u7a0b\u5ea6\u3002 \u5b83\u662f\u63a2\u7d22\u53d8\u91cf\u4e4b\u95f4\u7ebf\u6027\u6216\u975e\u7ebf\u6027\u5173\u7cfb\u7684\u5e38\u7528\u65b9\u6cd5\uff0c\u5c24\u5176\u5728\u79d1\u5b66\u7814\u7a76\u548c\u6570\u636e\u5206\u6790\u4e2d\u975e\u5e38\u5e38\u89c1\u3002</p> <p><code>plot_correlation_figure</code> \u63d0\u4f9b\u4e86\u7b80\u6d01\u6613\u7528\u7684\u70b9\u7ebf\u76f8\u5173\u56fe\u529f\u80fd\uff0c\u80fd\u591f\u81ea\u52a8\u7ed8\u5236\u53d8\u91cf\u6563\u70b9\u3001\u62df\u5408\u7ebf\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5e76\u663e\u793a Spearman \u6216 Pearson \u4e24\u79cd\u76f8\u5173\u7cfb\u6570\uff08\u9ed8\u8ba4\u8ba1\u7b97 Spearman \u76f8\u5173\u6027\uff09\u3002 \u540c\u65f6\uff0c<code>plot_correlation_figure</code> \u4f1a\u6839\u636e\u663e\u8457\u6027\u6c34\u5e73\u81ea\u52a8\u6807\u6ce8 <code>*</code>\u3001<code>**</code> \u6216 <code>***</code>\uff0c\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5224\u65ad\u76f8\u5173\u6027\u662f\u5426\u663e\u8457\uff0c\u9002\u5408\u7528\u4e8e\u79d1\u7814\u56fe\u8868\u3001\u6f14\u793a\u5e7b\u706f\u7247\u6216\u8bba\u6587\u63d2\u56fe\u4e2d\u3002</p>"},{"location":"usage/correlation/#_2","title":"\u5feb\u901f\u51fa\u56fe","text":"<p>\u5047\u5982\u6211\u4eec\u6709\u4e24\u7ec4\u6837\u672c\u6570\u91cf\u4e00\u81f4\u7684\u6570\u636e\uff08\u6bcf\u7ec4\u5305\u542b 100 \u4e2a\u6837\u672c\uff09\uff0c\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u7ed8\u56fe\u76f4\u89c2\u5c55\u793a\u5b83\u4eec\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\u3002 \u8fd9\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u70b9\u7ebf\u76f8\u5173\u56fe\u6765\u5b9e\u73b0\uff0c\u5c06\u6bcf\u5bf9\u6837\u672c\u503c\u7ed8\u5236\u4e3a\u6563\u70b9\uff0c\u5e76\u7ed3\u5408\u62df\u5408\u7ebf\u548c\u76f8\u5173\u7cfb\u6570\uff0c\u5224\u65ad\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u7a0b\u5ea6\u53ca\u663e\u8457\u6027\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\nnp.random.seed(42)\ndata1 = np.arange(100)\ndata2 = data1 + np.random.normal(1,50, 100)\n# data2\u662f\u5728data1\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e86\u566a\u58f0\u3002\n# \u6b63\u7ecf\u4eba\u90fd\u77e5\u9053data1\u548cdata2\u76f8\u5173\uff0c\u90a3\u4e48plotfig\u77e5\u4e0d\u77e5\u9053\u5462\uff1f\n\nax = plot_correlation_figure(data1,data2)\n</code></pre> <p></p>"},{"location":"usage/correlation/#_3","title":"\u53c2\u6570\u8bbe\u7f6e","text":"<p>\u5168\u90e8\u53c2\u6570\u89c1<code>plot_correlation_figure</code>\u7684 API \u6587\u6863\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\nnp.random.seed(42)\ndata1 = np.arange(100)\ndata2 = data1 + np.random.normal(1,50, 100)\n# data2\u662f\u5728data1\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e86\u566a\u58f0\u3002\n# \u6b63\u7ecf\u4eba\u90fd\u77e5\u9053data1\u548cdata2\u76f8\u5173\uff0c\u90a3\u4e48plotfig\u77e5\u4e0d\u77e5\u9053\u5462\uff1f\n\nfig, ax = plt.subplots(figsize=(3, 3))\nax = plot_correlation_figure(\n    data1,\n    data2,\n    stats_method=\"spearman\",  # \u4ec5\u6709\u201cspearman, pearson\u201d\uff0c\u9ed8\u8ba4\u662fspearman\n    ci=True,  # \u663e\u793a95%\u7f6e\u4fe1\u533a\u95f4\n    dots_color=\"green\",\n    line_color=\"pink\",\n    title_name=\"Correlation between data1 and data2\",\n    title_fontsize=10,\n    title_pad=20,  # \u63a7\u5236\u91ca\u6807\u9898\u548c\u56fe\u7684\u8ddd\u79bb\uff0c\u9ed8\u8ba4\u662f10\n    x_label_name=\"Data1\",\n    y_label_name=\"Data2\",\n)\n</code></pre> <p></p> <p>\u5229\u7528 <code>hexbin=True</code> \u3002\u6211\u4eec\u53ef\u4ee5\u5c55\u793a\u5927\u91cf\u6563\u70b9\u5206\u5e03\u7684\u5bc6\u5ea6\uff0c\u800c\u4e0d\u9700\u8981\u7ed8\u5236\u6240\u6709\u7684\u6563\u70b9\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\nnp.random.seed(42)\nn = 100_000\ndata1 = np.random.standard_normal(n)\ndata2 = 2.0 + 3.0 * data1 + 4.0 * np.random.standard_normal(n)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7, 3), layout=\"constrained\")\nax1 = plot_correlation_figure(\n    data1,\n    data2,\n    ax=ax1\n)\n\nhb = plot_correlation_figure(\n    data1,\n    data2,\n    ax=ax2,\n    hexbin=True,\n    hexbin_cmap=\"Reds\",\n    hexbin_gridsize=30\n)\ncb = fig.colorbar(hb, ax=ax2, label='counts')\n</code></pre> <p></p>"},{"location":"usage/matrix/","title":"\u77e9\u9635\u56fe","text":"<p>\u77e9\u9635\u56fe\u662f\u4e00\u79cd\u7528\u4e8e\u5c55\u793a\u591a\u4e2a\u53d8\u91cf\u4e4b\u95f4\u6210\u5bf9\u5173\u7cfb\u7684\u53ef\u89c6\u5316\u65b9\u5f0f\uff0c\u5e38\u89c1\u5f62\u5f0f\u4e3a\u4e00\u4e2a\u5bf9\u79f0\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5355\u5143\u683c\u8868\u793a\u4e00\u5bf9\u53d8\u91cf\u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u7cfb\u3002 \u5b83\u5e38\u7528\u4e8e\u63a2\u7d22\u6570\u636e\u96c6\u4e2d\u591a\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u7ed3\u6784\uff0c\u662f\u6570\u636e\u5206\u6790\u548c\u79d1\u7814\u7ed8\u56fe\u4e2d\u7684\u5e38\u7528\u5de5\u5177\u3002</p> <p><code>plot_matrix_figure</code> \u652f\u6301\u81ea\u52a8\u751f\u6210\u77e9\u9635\u56fe\u3002</p>"},{"location":"usage/matrix/#_2","title":"\u5feb\u901f\u51fa\u56fe","text":"<p>\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a 10 \u00d7 19 \u7684\u77e9\u9635\u56fe\uff0c\u7528\u4e8e\u5c55\u793a 10 \u4e2a\u5143\u7d20\u4e0e\u53e6 19 \u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u6210\u5bf9\u5173\u7cfb\u3002</p> <pre><code>import numpy as np\nfrom plotfig import *\n\ndata = np.random.rand(10, 19)\n\nax = plot_matrix_figure(data)\n</code></pre> <p></p>"},{"location":"usage/matrix/#_3","title":"\u53c2\u6570\u8bbe\u7f6e","text":"<p>\u5168\u90e8\u53c2\u6570\u89c1<code>plot_matrix_figure</code>\u7684 API \u6587\u6863\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\ndata = np.random.rand(4,4)\n\nfig, ax = plt.subplots(figsize=(3,3))\nax = plot_matrix_figure(\n    data,\n    row_labels_name=[\"A\", \"B\", \"C\", \"D\"],\n    col_labels_name=[\"E\", \"F\", \"G\", \"H\"],\n    cmap=\"viridis\",\n    title_name=\"Matrix Figure\",\n    title_fontsize=10,\n    colorbar=True,\n    colorbar_label_name=\"Colorbar\",\n)\n</code></pre> <p></p>"},{"location":"usage/multi_groups/","title":"\u591a\u7ec4\u67f1\u72b6\u56fe","text":""},{"location":"usage/multi_groups/#_2","title":"\u5feb\u901f\u51fa\u56fe","text":"<p>\u6211\u4eec\u91c7\u7528\u4e86\u591a\u7ec4\u67f1\u72b6\u56fe\uff08multi-group bar chart\uff09\u6765\u5c55\u793a\u6570\u636e\u7684\u6574\u4f53\u5206\u5e03\u60c5\u51b5\u3002 \u8be5\u56fe\u5305\u542b \u4e24\u7ec4\u6570\u636e\uff08\u5373\u4e24\u4e2a\u4e3b\u7c7b\u522b\uff09\uff0c\u6bcf\u7ec4\u4e2d\u5305\u542b \u4e09\u4e2a\u5b50\u67f1\uff08bar\uff09\uff0c\u5206\u522b\u4ee3\u8868\u4e0d\u540c\u7684\u5b50\u6761\u4ef6\u6216\u53d8\u91cf\u3002 \u5728\u6bcf\u4e2a bar \u5185\u90e8\uff0c\u7ed8\u5236\u4e86 10 \u4e2a\u6837\u672c\u70b9\uff0c\u53cd\u6620\u4e2a\u4f53\u6c34\u5e73\u7684\u53d8\u5f02\u6027\u6216\u89c2\u6d4b\u503c\u3002</p> <p>\u8fd9\u79cd\u56fe\u5f62\u7ed3\u6784\u6709\u52a9\u4e8e\u540c\u65f6\u6bd4\u8f83\uff1a</p> <ul> <li>\u6bcf\u7ec4\u5185\u4e0d\u540c\u6761\u4ef6\u4e4b\u95f4\u7684\u5e73\u5747\u5dee\u5f02\uff1b</li> <li>\u4e0d\u540c\u7ec4\u4e4b\u95f4\u7684\u6574\u4f53\u8d8b\u52bf\uff1b</li> <li>\u6bcf\u4e2a\u6761\u4ef6\u4e0b\u6837\u672c\u7684\u79bb\u6563\u60c5\u51b5\u6216\u5206\u5e03\u7279\u5f81\u3002</li> </ul> <p>\u4e3a\u4e86\u589e\u5f3a\u4fe1\u606f\u8868\u8fbe\uff0c\u67f1\u72b6\u56fe\u4e0a\u8fd8\u53e0\u52a0\u4e86\u8bef\u5dee\u6761\uff08\u5982\u6807\u51c6\u5dee\u6216\u51c6\u8bef\uff09\uff0c\u5e76\u4f7f\u7528\u6563\u70b9\u56fe\u5c55\u793a\u6bcf\u4e2a bar \u4e2d\u7684\u6837\u672c\u5206\u5e03\u3002</p> <pre><code>import numpy as np\nfrom plotfig import *\n\nnp.random.seed(42)\ngroup1_bar1 = np.random.normal(3, 1, 10)\ngroup1_bar2 = np.random.normal(3, 1, 10)\ngroup1_bar3 = np.random.normal(3, 1, 10)\ngroup2_bar1 = np.random.normal(3, 1, 10)\ngroup2_bar2 = np.random.normal(3, 1, 10)\ngroup2_bar3 = np.random.normal(3, 1, 10)\n\nax = plot_multi_group_bar_figure([[group1_bar1, group1_bar2, group1_bar3], [group2_bar1, group2_bar2, group2_bar3]])\n</code></pre> <p></p>"},{"location":"usage/multi_groups/#_3","title":"\u56fe\u7684\u7f8e\u5316","text":"<p>\u4e0e\u5355\u7ec4\u67f1\u72b6\u56fe\u7c7b\u4f3c\uff0c\u591a\u7ec4\u67f1\u72b6\u56fe\u4e5f\u63d0\u4f9b\u4e86\u5927\u91cf\u53ef\u8c03\u8282\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u7075\u6d3b\u63a7\u5236\u56fe\u50cf\u7684\u5916\u89c2\u3002 \u672c\u8282\u4ec5\u5c55\u793a\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u53c2\u6570\u3002</p> <p>\u5b8c\u6574\u53c2\u6570\u5217\u8868\u8bf7\u53c2\u89c1 <code>plot_multi_group_bar_figure</code> \u7684 API \u6587\u6863\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\nnp.random.seed(42)\ngroup1_bar1 = np.random.normal(3, 1, 10)\ngroup1_bar2 = np.random.normal(3, 1, 10)\ngroup1_bar3 = np.random.normal(3, 1, 10)\ngroup2_bar1 = np.random.normal(3, 1, 10)\ngroup2_bar2 = np.random.normal(3, 1, 10)\ngroup2_bar3 = np.random.normal(3, 1, 10)\n\nfig, ax = plt.subplots(figsize=(6, 3))\nax = plot_multi_group_bar_figure(\n    [[group1_bar1, group1_bar2, group1_bar3], [group2_bar1, group2_bar2, group2_bar3]],\n    ax=ax,\n    group_labels=[\"A\", \"B\"],\n    bar_labels=[\"D\", \"E\", \"F\"],\n    bar_width=0.2,\n    bar_gap=0.05,\n    bar_color=[\"tab:blue\", \"tab:orange\", \"tab:green\"],\n    errorbar_type=\"sd\",\n    dots_color=\"pink\",\n    dots_size=15,\n    title_name=\"Title name\",\n    title_fontsize=15,\n    y_label_name=\"Y label name\",\n)\n</code></pre> <p></p>"},{"location":"usage/multi_groups/#_4","title":"\u7edf\u8ba1","text":"<p>\u591a\u7ec4\u67f1\u72b6\u56fe\u76ee\u524d\u4ec5\u652f\u6301\u901a\u8fc7\u5916\u90e8\u7edf\u8ba1\u68c0\u9a8c\u4f20\u5165 p \u503c\uff0c\u5e76\u5728\u7ec4\u5185\u76f8\u5e94\u4f4d\u7f6e\u6807\u6ce8\u661f\u53f7\u3002</p> <p>\u5173\u4e8e\u201c\u5916\u90e8\u7edf\u8ba1\u68c0\u9a8c\u201d\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u89c1\uff1a\u5355\u7ec4\u67f1\u72b6\u56fe / \u7edf\u8ba1\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\nnp.random.seed(42)\ngroup1_bar1 = np.random.normal(3, 1, 10)\ngroup1_bar2 = np.random.normal(3, 1, 10)\ngroup1_bar3 = np.random.normal(3, 1, 10)\ngroup2_bar1 = np.random.normal(3, 1, 10)\ngroup2_bar2 = np.random.normal(3, 1, 10)\ngroup2_bar3 = np.random.normal(3, 1, 10)\n\nfig, ax = plt.subplots(figsize=(6, 3))\nax = plot_multi_group_bar_figure(\n    [[group1_bar1, group1_bar2, group1_bar3], [group2_bar1, group2_bar2, group2_bar3]],\n    ax=ax,\n    group_labels=[\"A\", \"B\"],\n    bar_labels=[\"D\", \"E\", \"F\"],\n    bar_width=0.2,\n    bar_gap=0.05,\n    bar_color=[\"tab:blue\", \"tab:orange\", \"tab:green\"],\n    errorbar_type=\"se\",\n    dots_color=\"pink\",\n    dots_size=15,\n    title_name=\"Title name\",\n    title_fontsize=15,\n    y_label_name=\"Y label name\",\n    statistic=True,\n    test_method=\"external\",\n    p_list=[[0.05, 0.01, 0.001], [0.001, 0.01, 0.05]]\n)\n</code></pre> <p></p>"},{"location":"usage/single_group/","title":"\u5355\u7ec4\u67f1\u72b6\u56fe","text":""},{"location":"usage/single_group/#_2","title":"\u5feb\u901f\u51fa\u56fe","text":"<p>\u67f1\u72b6\u56fe\uff08bar chart\uff09\u662f\u4e00\u79cd\u5e38\u7528\u7684\u56fe\u5f62\u5de5\u5177\uff0c\u7528\u4e8e\u5c55\u793a\u4e0d\u540c\u7c7b\u522b\u4e4b\u95f4\u7684\u6570\u503c\u5bf9\u6bd4\u3002 \u5b83\u901a\u8fc7\u4e00\u7ec4\u5782\u76f4\u6216\u6c34\u5e73\u7684\u77e9\u5f62\u6761\u6765\u8868\u793a\u5404\u7c7b\u522b\u7684\u503c\uff0c\u6761\u7684\u9ad8\u5ea6\uff08\u6216\u957f\u5ea6\uff09\u5bf9\u5e94\u6570\u636e\u7684\u5927\u5c0f\u3002 \u67f1\u72b6\u56fe\u76f4\u89c2\u3001\u6e05\u6670\uff0c\u9002\u5408\u7528\u4e8e\u6bd4\u8f83\u7ec4\u95f4\u7684\u5747\u503c\uff0c\u5c24\u5176\u9002\u7528\u4e8e\u79bb\u6563\u7c7b\u522b\u6570\u636e\u7684\u53ef\u89c6\u5316\u3002 \u5728\u79d1\u7814\u548c\u6570\u636e\u5206\u6790\u4e2d\uff0c\u67f1\u72b6\u56fe\u5e38\u7528\u4e8e\u5448\u73b0\u5b9e\u9a8c\u7ec4\u4e0e\u5bf9\u7167\u7ec4\u4e4b\u95f4\u7684\u5dee\u5f02\u3002 <code>plotfig</code> \u57fa\u4e8e\u5f3a\u5927\u7684 <code>matplotlib</code> \u5f00\u53d1\uff0c\u7b80\u5316\u4e86\u753b\u56fe\u6d41\u7a0b\uff0c\u4f7f\u5f97\u591a\u7ec4\u6570\u636e\u7684\u5bf9\u6bd4\u66f4\u52a0\u76f4\u89c2\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u67093\u7ec4\u6570\u636e \uff08\u5206\u522b\u67099\u4e2a\u6837\u672c\u300110\u4e2a\u6837\u672c\u300111\u4e2a\u6837\u672c\uff09\u901a\u8fc7\u67f1\u72b6\u56fe\u5c55\u793a\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u5f02\u3002</p> <pre><code>import numpy as np\nfrom plotfig import *\n\ndata1 = np.random.normal(1, 1, 9)\ndata2 = np.random.normal(2, 1, 10)\ndata3 = np.random.normal(3, 1, 11)\n\nax = plot_one_group_bar_figure([data1, data2, data3])\n</code></pre> <p></p>"},{"location":"usage/single_group/#_3","title":"\u591a\u5b50\u56fe","text":"<p>\u501f\u52a9 <code>matplotlib</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5916\u90e8\u9884\u5148\u521b\u5efa <code>figure</code> \u548c <code>axes</code>\uff0c\u4ece\u800c\u7075\u6d3b\u7ed8\u5236\u591a\u4e2a\u5b50\u56fe\uff0c\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u56fe\u5f62\u5e03\u5c40\u3002 \u5173\u4e8e\u66f4\u9ad8\u7ea7\u7684\u5b50\u56fe\u6392\u7248\u65b9\u5f0f\uff0c\u8be6\u89c1matplotlib\u4e2d\u7684\u6559\u7a0b\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\nax1_bar1 = np.random.normal(0, 1, 7)\nax1_bar2 = np.random.normal(0, 1, 8)\nax2_bar1 = np.random.normal(0, 1, 9)\nax2_bar2 = np.random.normal(0, 1, 10)\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\nfig.subplots_adjust()\n\nax1 = plot_one_group_bar_figure([ax1_bar1, ax1_bar2], ax=axes.flatten()[0])\nax2 = plot_one_group_bar_figure([ax2_bar1, ax2_bar2], ax=axes.flatten()[1])\n</code></pre> <p></p> <p>\u66f4\u591a <code>axes</code> \u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\nax1_bar1 = np.random.normal(3, 1, 7)\nax1_bar2 = np.random.normal(3, 1, 8)\nax2_bar1 = np.random.normal(3, 1, 9)\nax2_bar2 = np.random.normal(3, 1, 10)\nax3_bar1 = np.random.normal(3, 1, 9)\nax3_bar2 = np.random.normal(3, 1, 10)\nax4_bar1 = np.random.normal(3, 1, 9)\nax4_bar2 = np.random.normal(3, 1, 10)\n\n\nfig, axes = plt.subplots(2, 2, figsize=(6, 6))\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\nax1 = plot_one_group_bar_figure([ax1_bar1, ax1_bar2], ax=axes[0,0], labels_name=[\"A\", \"B\"])\nax2 = plot_one_group_bar_figure([ax2_bar1, ax2_bar2], ax=axes[0,1], labels_name=[\"C\", \"D\"])\nax3 = plot_one_group_bar_figure([ax3_bar1, ax3_bar2], ax=axes[1,0], labels_name=[\"E\", \"F\"])\nax4 = plot_one_group_bar_figure([ax4_bar1, ax4_bar2], ax=axes[1,1], labels_name=[\"G\", \"H\"])\n</code></pre> <p></p>"},{"location":"usage/single_group/#_4","title":"\u56fe\u7684\u7f8e\u5316","text":""},{"location":"usage/single_group/#_5","title":"\u53c2\u6570\u8bbe\u7f6e","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5728\u5916\u90e8\u521b\u5efa <code>fig</code> \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u7075\u6d3b\u63a7\u5236\u56fe\u50cf\u5927\u5c0f\u3002 <code>plotfig</code> \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u9009\u9879\u7528\u4e8e\u81ea\u5b9a\u4e49\u56fe\u5f62\u6837\u5f0f\u3002 \u4e0b\u9762\u5c55\u793a\u7684\u662f <code>plot_one_group_bar_figure</code> \u51fd\u6570\u4e2d\u90e8\u5206\u5e38\u7528\u53c2\u6570\u7684\u793a\u4f8b\u7528\u6cd5\u3002</p> <p>\u5b8c\u6574\u53c2\u6570\u8bf4\u660e\u8bf7\u53c2\u9605 <code>plot_one_group_bar_figure</code> \u7684 API \u6587\u6863\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\ndata1 = np.random.normal(7, 1, 10)\ndata2 = np.random.normal(8, 1, 9)\n\nfig, ax = plt.subplots(figsize=(3, 3))\nax = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=ax,\n    labels_name=[\"A\", \"B\"],\n    x_label_name=\"x\",\n    y_label_name=\"y\",\n    title_name=\"Title name\",\n    title_fontsize=15,\n    width=0.5,\n    dots_size=15,\n    colors=[\"#4573a5\", \"orange\"],\n    color_alpha=0.7,\n    errorbar_type=\"sd\",\n    edgecolor=\"r\",\n)\n</code></pre> <p></p> <p><code>plot_one_group_bar_figure</code> \u652f\u6301\u5c06\u67f1\u72b6\u56fe\u7ed8\u5236\u4e3a\u6e10\u53d8\u8272\u6837\u5f0f\uff0c\u9002\u7528\u4e8e\u5c55\u793a\u4e0d\u540c\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u8054\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u8ba1\u7b97\u4e86\u201c\u4eba-\u9ed1\u7329\u7329\u3001\u4eba-\u7315\u7334\u3001\u9ed1\u7329\u7329-\u7315\u7334\u201d\u4e4b\u95f4\u7684\u540c\u6e90\u8111\u533a\uff08\u5171 20 \u4e2a\uff09\u7ed3\u6784\u8fde\u63a5\u7684 Spearman \u76f8\u5173\u6027\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u884c\u53ef\u89c6\u5316\u5c55\u793a\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n\nhuman_color = \"#e38a48\"\nchimp_color = \"#919191\"\nmacaque_color = \"#4573a5\"\n\nnp.random.seed(42)\nhuman_chimp = np.random.normal(7, 1, 20)\nhuman_macaque = np.random.normal(7, 1, 20)\nchimp_macaque = np.random.normal(7, 1, 20)\n\nfig, ax = plt.subplots(figsize=(5,5))\nax = plot_one_group_bar_figure(\n    [human_chimp, human_macaque, chimp_macaque],\n    ax=ax,\n    labels_name=[\"Human-Chimp\", \"Human-Macaque\", \"Chimp-Macaque\"],\n    y_label_name=\"Spearman correlation\",\n    width=0.7,\n    errorbar_type=\"sd\",\n    gradient_color=True,\n    colors_start= [human_color, human_color, chimp_color],\n    colors_end= [chimp_color, macaque_color, macaque_color]\n)\n</code></pre> <p></p>"},{"location":"usage/single_group/#x","title":"\u5173\u4e8ex\u8f74","text":"<p>\u5f53 x \u8f74\u6807\u7b7e\u8f83\u957f\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u65cb\u8f6c\u89d2\u5ea6\u6765\u907f\u514d\u91cd\u53e0\uff0c\u63d0\u5347\u53ef\u8bfb\u6027\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\ndata1 = np.random.normal(3, 1, 10)\ndata2 = np.random.normal(4, 1, 9)\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\nfig.subplots_adjust(wspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0],\n    labels_name=[\"AAAAAAAAAAA\", \"BBBBBBBBBB\"],\n    y_label_name=\"y\",\n    title_name=\"\u540d\u5b57\u8fc7\u957f\",\n    title_fontsize=15,\n)\nax2 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[1],\n    labels_name=[\"AAAAAAAAAAA\", \"BBBBBBBBBB\"],\n    y_label_name=\"y\",\n    title_name=\"\u951a\u5b9a\u4e2d\u95f4\u65cb\u8f6c\",\n    title_fontsize=15,\n    x_tick_rotation=10,\n    x_label_ha=\"center\",\n)\n</code></pre> <p></p>"},{"location":"usage/single_group/#y","title":"\u5173\u4e8ey\u8f74","text":"<p><code>plot_one_group_bar_figure</code> \u9ed8\u8ba4\u4f1a\u81ea\u52a8\u8ba1\u7b97\u6700\u9ad8\u70b9\u4e0e\u6700\u4f4e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a y \u8f74\u957f\u5ea6\u7684 0.618\uff08\u5373\u9ec4\u91d1\u6bd4\u4f8b\uff09\uff0c\u4ee5\u4f18\u5316\u89c6\u89c9\u6548\u679c\u3002 \u5982\u679c\u5e0c\u671b\u624b\u52a8\u8bbe\u7f6e y \u8f74\u8303\u56f4\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>y_lim</code> \u53c2\u6570\u6765\u81ea\u5b9a\u4e49\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\ndata1 = np.random.normal(3, 1, 10)\ndata2 = np.random.normal(4, 1, 9)\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\nfig.subplots_adjust(wspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u9ec4\u91d1\u6bd4\u4f8b\u663e\u793a\",\n    title_fontsize=15,\n)\nax2 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u624b\u52a8\u8bbe\u7f6ey\u8f74\",\n    title_fontsize=15,\n    y_lim=(2, 6)  # \u8bbe\u7f6ey\u8f74\u8303\u56f4\n)\n</code></pre> <p></p> <p>\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u5c06 ax \u7684\u5e95\u7aef\u56fa\u5b9a\u4e3a 0\uff0c\u4f46\u4e0d\u786e\u5b9a\u6700\u5927\u523b\u5ea6\u7684\u5177\u4f53\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>ax_bottom_is_0</code> \u6765\u8bbe\u7f6e ax \u5e95\u7aef\u56fa\u5b9a\u4e3a0\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\ndata1 = np.random.normal(1,  1, 10)\ndata2 = np.random.normal(2, 1, 9)\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\nfig.subplots_adjust(wspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u9ec4\u91d1\u6bd4\u4f8b\u663e\u793a\",\n    title_fontsize=15,\n)\nax2 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u4e0d\u663e\u793a\u8d1f\u503c\",\n    title_fontsize=15,\n    ax_bottom_is_0=True,  # \u4e0d\u663e\u793a\u8d1f\u503c\n)\n</code></pre> <p></p> <p>\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u5c06 y \u8f74\u7684\u523b\u5ea6\u6700\u5927\u503c\u9650\u5236\u4e3a 1\uff0c\u4f8b\u5982\u5f53 y \u8f74\u8868\u793a\u7ecf\u8fc7 Fisher z \u8f6c\u6362\u7684\u76f8\u5173\u7cfb\u6570\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6e<code>y_max_tick_to_one</code>\u6765\u56fa\u5b9a y \u8f74\u7684\u523b\u5ea6\u6700\u5927\u503c\u4e3a1\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\ndata1 = np.random.normal(0.9,  0.1, 10)\ndata2 = np.random.normal(0.9, 0.1, 9)\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\nfig.subplots_adjust(wspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u9ec4\u91d1\u6bd4\u4f8b\u663e\u793a\",\n    title_fontsize=15,\n)\nax2 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"y\u8f74\u6700\u5927\u523b\u5ea6\u53d61\",\n    title_fontsize=15,\n    y_max_tick_is_1=True,  # y\u8f74\u6700\u5927\u523b\u5ea6\u53d61\n)\n</code></pre> <p></p> <p>\u6709\u65f6\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u66f4\u6539 y \u8f74\u7684\u663e\u793a\u683c\u5f0f\uff0c\u4f8b\u5982\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u6765\u5448\u73b0\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>math_text</code> \u53c2\u6570\u6765\u8bbe\u7f6e\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\ndata1 = np.random.normal(10000, 1000, 10)\ndata2 = np.random.normal(11000, 1000, 9)\ndata3 = np.random.normal(0.0001, 0.0001, 11)\ndata4 = np.random.normal(0.0001, 0.0001, 12)\n\nfig, axes = plt.subplots(2, 2, figsize=(6, 6))\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0,0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u79d1\u5b66\u8ba1\u6570\u6cd5\",\n    title_fontsize=15,\n)  # \u9ed8\u8ba4y\u8f74\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\nax2 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0,1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u65e0\u79d1\u5b66\u8ba1\u6570\u6cd5\",\n    title_fontsize=15,\n    math_text=False,  # \u624b\u52a8\u5173\u95ed\u79d1\u5b66\u8ba1\u6570\u6cd5\n)\nax3 = plot_one_group_bar_figure(\n    [data3, data4],\n    ax=axes[1,0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u79d1\u5b66\u8ba1\u6570\u6cd5\",\n    title_fontsize=15,\n)  # \u9ed8\u8ba4y\u8f74\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\nax4 = plot_one_group_bar_figure(\n    [data3, data4],\n    ax=axes[1,1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u65e0\u79d1\u5b66\u8ba1\u6570\u6cd5\",\n    title_fontsize=15,\n    math_text=False,  # \u624b\u52a8\u5173\u95ed\u79d1\u5b66\u8ba1\u6570\u6cd5\n)\n</code></pre> <p></p> <p>\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u5c06 Y \u8f74\u663e\u793a\u4e3a\u767e\u5206\u6bd4\u683c\u5f0f\u3002</p> <p>Warning</p> <p><code>percentage</code> \u683c\u5f0f\u4f1a\u4e0e <code>math_text</code> \u51b2\u7a81\u3002 \u800c<code>math_text</code> \u9ed8\u8ba4\u6253\u5f00\uff0c\u9700\u663e\u5f0f\u5173\u95ed\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\ndata1 = np.random.normal(0.5,  0.1, 10)\ndata2 = np.random.normal(0.5, 0.1, 9)\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\nfig.subplots_adjust(wspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u5e38\u89c4\u663e\u793a\",\n    title_fontsize=15,\n)\nax2 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u663e\u793a\u767e\u5206\u6bd4\",\n    title_fontsize=15,\n    math_text=False,\n    percentage=True,\n)\n</code></pre> <p></p>"},{"location":"usage/single_group/#_6","title":"\u5173\u4e8e\u6563\u70b9","text":"<p><code>plot_one_group_bar_figure</code> \u5141\u8bb8\u4e3a\u6bcf\u4e2a\u6563\u70b9\u5206\u914d\u989c\u8272\uff0c\u5e38\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u6765\u6e90\u7684\u6570\u636e\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\ndata1 = np.random.normal(0.5,  0.1, 10)\ndata2 = np.random.normal(0.5, 0.1, 9)\ndots_color1 = [[\"blue\"]*10, [\"red\"]*9]\ndots_color2 = [[\"green\"]*5+[\"pink\"]*5, [\"orange\"]*4+[\"purple\"]*5]\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\nfig.subplots_adjust(wspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u6563\u70b9\u7edf\u4e00\u989c\u8272\",\n    title_fontsize=15,\n    dots_color=dots_color1,  # \u6563\u70b9\u989c\u8272\n)\nax2 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u6563\u70b9\u5404\u81ea\u5206\u914d\u989c\u8272\",\n    title_fontsize=15,\n    dots_color=dots_color2,  # \u6563\u70b9\u989c\u8272\n)\n</code></pre> <p></p>"},{"location":"usage/single_group/#_7","title":"\u7edf\u8ba1","text":"<p><code>plot_one_group_bar_figure</code> \u53ef\u5feb\u901f\u5b9e\u73b0\u67f1\u95f4\u7edf\u8ba1\u6bd4\u8f83\u3002\u5f53\u524d\u652f\u6301\u4ee5\u4e0b\u7edf\u8ba1\u65b9\u6cd5\uff1a</p> <ol> <li>\u72ec\u7acb\u6837\u672c t \u68c0\u9a8c\uff08<code>ttest_ind</code>\uff09</li> <li>\u914d\u5bf9\u6837\u672c t \u68c0\u9a8c\uff08<code>ttest_rel</code>\uff09</li> <li>\u5355\u6837\u672ct\u68c0\u9a8c\uff08<code>ttest_1samp</code>\uff09</li> <li>Mann-Whitney U \u68c0\u9a8c\uff08<code>mannwhitneyu</code>\uff09</li> <li>\u5916\u90e8\u7edf\u8ba1\u68c0\u9a8c \uff08<code>external</code>\uff09</li> </ol> <p>\u4f7f\u7528\u65f6\u9700\u5148\u901a\u8fc7 <code>statistic</code> \u9009\u9879\u542f\u7528\u7edf\u8ba1\u529f\u80fd\uff0c\u5e76\u5728 <code>test_method</code> \u4e2d\u6307\u5b9a\u65b9\u6cd5\u540d\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\nnp.random.seed(42)\ndata1 = np.random.normal(3, 1, 30)\ndata2 = np.random.normal(4, 1, 31)\ndata3 = np.random.normal(5, 1, 31)\ndata4 = np.random.normal(2, 1, 9)\ndata5 = np.random.normal(4, 1, 10)\ndata6 = np.random.normal(0, 1, 20)\ndata7 = np.random.normal(1, 1, 20)\n\nfig, axes = plt.subplots(2, 2, figsize=(6, 6))\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\nax1 = plot_one_group_bar_figure(\n    [data1, data2],\n    ax=axes[0,0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u72ec\u7acb\u6837\u672ct\u68c0\u9a8c\",\n    title_fontsize=15,\n    statistic=True, \n    test_method=[\"ttest_ind\"]\n)\nax2 = plot_one_group_bar_figure(\n    [data2, data3],\n    ax=axes[0,1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u914d\u5bf9\u6837\u672ct\u68c0\u9a8c\",\n    title_fontsize=15,\n    statistic=True, \n    test_method=[\"ttest_rel\"]\n)\nax3 = plot_one_group_bar_figure(\n    [data6, data7],\n    ax=axes[1,0],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"\u5355\u6837\u672ct\u68c0\u9a8c\",\n    title_fontsize=15,\n    statistic=True,\n    test_method=[\"ttest_1samp\"],\n    popmean=0,\n)\nax4 = plot_one_group_bar_figure(\n    [data4, data5],\n    ax=axes[1,1],\n    labels_name=[\"A\", \"B\"],\n    y_label_name=\"y\",\n    title_name=\"Mann-Whitney U\u68c0\u9a8c\",\n    title_fontsize=15,\n    statistic=True, \n    test_method=[\"mannwhitneyu\"]\n)\n</code></pre> <p></p> <p>\u201c\u5916\u90e8\u7edf\u8ba1\u68c0\u9a8c\u201d\uff08<code>external</code>\uff09\u6307\u7528\u6237\u53ef\u4f7f\u7528\u5176\u4ed6\u7edf\u8ba1\u8f6f\u4ef6\u5b8c\u6210\u68c0\u9a8c\uff0c\u53ea\u9700\u5c06\u8ba1\u7b97\u597d\u7684 p \u503c\u4f20\u5165\u51fd\u6570\u3002 \u5916\u90e8\u7edf\u8ba1\u68c0\u9a8c\u9700\u901a\u8fc7 <code>p_list</code> \u989d\u5916\u4f20\u5165\u5bf9\u5e94\u7684 p \u503c\u5217\u8868\u3002</p> <p>Note</p> <p>\u5f53\u4f7f\u7528\u201c\u5916\u90e8\u7edf\u8ba1\u68c0\u9a8c\u201d\u4e14\u6709\u591a\u4e2a\u67f1\u5b50\u9700\u8981\u6bd4\u8f83\u65f6\uff0c\u4f20\u5165\u7684 p \u503c\u5e94\u9075\u5faa\u4ee5\u4e0b\u987a\u5e8f\uff1a</p> <ul> <li>1 \u2192 2\u30011 \u2192 3\u3001\u2026\u30011 \u2192 n  </li> <li>2 \u2192 3\u30012 \u2192 4\u3001\u2026\u30012 \u2192 n  </li> <li>\u4f9d\u6b64\u7c7b\u63a8</li> </ul> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\nplt.rcParams['font.family'] = \"Microsoft YaHei\"  # \u5fae\u8f6f\u96c5\u9ed1\nplt.rcParams['axes.unicode_minus'] = False  # \u6b63\u786e\u663e\u793a\u8d1f\u53f7\n\nnp.random.seed(42)\ndata1 = np.random.normal(5,  1, 20)\ndata2 = np.random.normal(7, 1, 20)\ndata3 = np.random.normal(7, 1, 20)\ndata4 = np.random.normal(9, 1, 20)\n\np_list = [0.05, 0.01, 0.001, 1, 0.05, 0.01]\n\nfig, ax = plt.subplots(figsize=(6, 6))\nax = plot_one_group_bar_figure(\n    [data1, data2, data3, data4],\n    ax=ax,\n    y_label_name=\"y\",\n    title_name=\"\u5916\u90e8\u68c0\u9a8c\",\n    title_fontsize=15,\n    statistic=True,\n    test_method=[\"external\"],\n    p_list=p_list,\n)\n</code></pre> <p></p>"},{"location":"usage/single_group/#_8","title":"\u5355\u7ec4\u5c0f\u63d0\u7434\u56fe","text":"<p>\u5c0f\u63d0\u7434\u56fe\uff08violin plot\uff09\u662f\u4e00\u79cd\u7ed3\u5408\u7bb1\u7ebf\u56fe\uff08box plot\uff09\u548c\u6838\u5bc6\u5ea6\u4f30\u8ba1\u56fe\uff08density plot\uff09\u7279\u70b9\u7684\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u7528\u4e8e\u5c55\u793a\u6570\u636e\u7684\u5206\u5e03\u60c5\u51b5\u3002 \u5b83\u4e0d\u4ec5\u663e\u793a\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u3001\u56db\u5206\u4f4d\u6570\u7b49\u7edf\u8ba1\u4fe1\u606f\uff0c\u8fd8\u901a\u8fc7\u5bf9\u79f0\u7684\u6838\u5bc6\u5ea6\u66f2\u7ebf\uff0c\u76f4\u89c2\u53cd\u6620\u6570\u636e\u5728\u4e0d\u540c\u53d6\u503c\u533a\u95f4\u7684\u5206\u5e03\u5f62\u6001\u3002 \u76f8\u6bd4\u4f20\u7edf\u7bb1\u7ebf\u56fe\uff0c\u5c0f\u63d0\u7434\u56fe\u80fd\u66f4\u5168\u9762\u63ed\u793a\u6570\u636e\u7684\u591a\u5cf0\u6027\u3001\u504f\u6001\u7b49\u7279\u5f81\uff0c\u9002\u5408\u6bd4\u8f83\u591a\u4e2a\u7ec4\u522b\u7684\u5206\u5e03\u5dee\u5f02\u3002 \u5f53\u6570\u636e\u5206\u5e03\u4e0d\u5747\u5300\uff0c\u4e14\u91c7\u7528\u975e\u53c2\u6570\u7edf\u8ba1\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u5c0f\u7434\u56fe\u5c55\u793a\u5f80\u5f80\u66f4\u4e3a\u5408\u9002\u3002</p> <p>\u5728 plotfig \u4e2d\uff0c\u7ed8\u5236\u5c0f\u63d0\u7434\u56fe\u7684\u51fd\u6570\u540d\u4e3a <code>plot_one_group_violin_figure</code>\u3002 \u5176\u5927\u90e8\u5206\u53c2\u6570\u4e0e <code>plot_one_group_bar_figure</code> \u76f8\u4f3c\uff0c\u4ee5\u4e0b\u662f\u90e8\u5206\u6f14\u793a\u3002</p> <p>\u5b8c\u6574\u53c2\u6570\u8bf4\u660e\u8bf7\u53c2\u9605 <code>plot_one_group_violin_figure</code> \u7684 API \u6587\u6863\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom plotfig import *\n\n\nhuman_color = \"#e38a48\"\nchimp_color = \"#919191\"\nmacaque_color = \"#4573a5\"\n\nnp.random.seed(42)\nhuman_chimp = 1 + np.random.normal(0, 1, 100)\nhuman_macaque = 2 + np.random.normal(0, 1, 100)\nchimp_macaque = 3 + np.random.normal(0, 1, 100)\n\nfig, ax = plt.subplots(figsize=(5,5))\nax = plot_one_group_violin_figure(\n    [human_chimp, human_macaque, chimp_macaque],\n    ax=ax,\n    labels_name=[\"Human-Chimp\", \"Human-Macaque\", \"Chimp-Macaque\"],\n    y_label_name=\"Spearman correlation\",\n    width=0.7,\n    gradient_color=True,\n    colors_start= [human_color, human_color, chimp_color],\n    colors_end= [chimp_color, macaque_color, macaque_color],\n    show_dots=True,\n    dots_size=7,\n    statistic=True,\n    test_method=[\"mannwhitneyu\"]\n)\n</code></pre> <p></p>"}]}